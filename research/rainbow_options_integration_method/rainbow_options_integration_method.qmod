qfunc qmci_oracle(ind: qbit) {
  Z(ind);
}

qfunc affine_max(x1: qnum, x2: qnum, output res: qnum) {
  res = max(x1 * 1.0, ((x1 * 0.75) + (x2 * 0.75)) + (-1.25));
}

qfunc asset_geq_strike_price(x: qnum, output res: qbit) {
  res = x > 1.5;
}

qfunc integrator(x: qnum, ref: qnum, res: qbit) {
  prepare_exponential_state<-((1 / (2 ** x.fraction_digits)) * 0.4341)>(ref);
  x_uint: qnum<x.size, False, 0>;
  x -> x_uint;
  res ^= x_uint >= ref;
  x_uint -> x;
}

qfunc integration_load_amplitudes(geq_reg: qnum, max_reg: qnum, integrator_reg: qnum, ind_reg: qbit) {
  control (geq_reg == 1) {
    integrator(max_reg, integrator_reg, ind_reg);
  }
  control (geq_reg == 0) {
    RY<2 * asin(sqrt((190 - ((193.97 * exp(-0.7408)) * (1 / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341)))) / ((193.97 * exp(-0.7408)) * ((exp((2 ** max_reg.size) * ((1 / (2 ** max_reg.fraction_digits)) * 0.4341)) - 1) / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341)))))>(ind_reg);
  }
}

qfunc integration_payoff(max_reg: qnum, integrator_reg: qnum, ind_reg: qbit) {
  geq_reg: qbit;
  within {
    asset_geq_strike_price(max_reg, geq_reg);
  } apply {
    integration_load_amplitudes(geq_reg, max_reg, integrator_reg, ind_reg);
  }
}

qfunc rainbow_integration(x1: qnum, x2: qnum, integrator_reg: qnum, ind_reg: qbit) {
  inplace_prepare_state<[
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0>(x1);
  inplace_prepare_state<[
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0>(x2);
  max_out: qnum;
  within {
    affine_max(x1, x2, max_out);
  } apply {
    integration_payoff(max_out, integrator_reg, ind_reg);
  }
}

qfunc grover_algorithm<k: int, oracle_operand: qfunc (arg0: qbit[]), sp_operand: qfunc (arg0: qbit[])>(x: qbit[]) {
  sp_operand(x);
  power (k) {
    grover_operator<oracle_operand, sp_operand>(x);
  }
}

qfunc main<k: int>(output ind_reg: qbit) {
  full_reg: qbit[];
  allocate<10>(full_reg);
  grover_algorithm<k, lambda(arg0) {
    qmci_oracle(arg0[arg0.len - 1]);
  }, lambda(arg0) {
    rainbow_integration(arg0[0:2], arg0[2:4], arg0[4:9], arg0[arg0.len - 1]);
  }>(full_reg);
  state_reg: qbit[];
  full_reg -> {state_reg, ind_reg};
}

cscope ```
iqae_res = iqae(epsilon=0.05, alpha=0.1)
save({'iqae_res': iqae_res})
```
