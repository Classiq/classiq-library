EPSILON: real = 0.05;

ALPHA: real = 0.1;

qstruct EstimationVars {
  x1: qnum<2, False, 0>;
  x2: qnum<2, False, 0>;
  ind: qbit;
}

qfunc qmci_oracle(qvars: EstimationVars) {
  Z(qvars.ind);
}

qfunc affine_max(x1: qnum, x2: qnum, output res: qnum) {
  res = max(x1 * 1.0, ((x1 * 0.5) + (x2 * 0.5)) + (-1.5));
}

qfunc brute_force_payoff(max_reg: qnum, ind_reg: qbit) {
  max_reg_fixed: qnum<max_reg.size, False, max_reg.size>;
  max_reg -> max_reg_fixed;
  ind_reg *= sqrt(max(193.97 * exp(((0.4341 * (2 ** (max_reg.size - max_reg.fraction_digits))) * max_reg_fixed) + (-0.7408)), 190)) / sqrt(max(193.97 * exp(((0.4341 * (2 ** (max_reg.size - max_reg.fraction_digits))) * (1 - (1 / (2 ** max_reg.size)))) + (-0.7408)), 190));
  max_reg_fixed -> max_reg;
}

qfunc rainbow_brute_force(qvars: EstimationVars) {
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x1);
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x2);
  max_out: qnum;
  within {
    affine_max(qvars.x1, qvars.x2, max_out);
  } apply {
    brute_force_payoff(max_out, qvars.ind);
  }
}

qfunc grover_algorithm(k: int, oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  sp_operand(x);
  power (k) {
    grover_operator(oracle_operand, sp_operand, x);
  }
}

qfunc main(k: int, output ind: qbit) {
  qvars: EstimationVars;
  allocate(qvars.size, qvars);
  grover_algorithm(k, qmci_oracle, rainbow_brute_force, qvars);
  state_reg: qbit[];
  qvars -> {state_reg, ind};
}

cscope ```
iqae_res = iqae(epsilon=EPSILON, alpha=ALPHA)
save({'iqae_res': iqae_res})
```
