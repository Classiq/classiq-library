EPSILON: real = 0.05;

ALPHA: real = 0.1;

qstruct EstimationVars {
  x1: qnum<2, False, 0>;
  x2: qnum<2, False, 0>;
  integrator: qnum<5, False, 2>;
  ind: qbit;
}

qfunc qmci_oracle(qvars: EstimationVars) {
  Z(qvars.ind);
}

qfunc affine_max(x1: qnum, x2: qnum, output res: qnum) {
  res = max(x1 * 1.0, ((x1 * 0.75) + (x2 * 0.75)) + (-1.25));
}

qfunc asset_geq_strike_price(x: qnum, output res: qbit) {
  res = x > 1.5;
}

qfunc integrator(x: qnum, ref: qnum, res: qbit) {
  prepare_exponential_state(-((1 / (2 ** x.fraction_digits)) * 0.4341), ref);
  res ^= x >= ref;
}

qfunc integration_load_amplitudes(geq_reg: qnum, max_reg: qnum, integrator_reg: qnum, ind_reg: qbit) {
  control (geq_reg == 1) {
    integrator(max_reg, integrator_reg, ind_reg);
  }
  control (geq_reg == 0) {
    RY(2 * asin(sqrt((190 - ((193.97 * exp(-0.7408)) * (1 / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341)))) / ((193.97 * exp(-0.7408)) * ((exp((2 ** max_reg.size) * ((1 / (2 ** max_reg.fraction_digits)) * 0.4341)) - 1) / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341))))), ind_reg);
  }
}

qfunc integration_payoff(max_reg: qnum, integrator_reg: qnum, ind_reg: qbit) {
  geq_reg: qbit;
  within {
    asset_geq_strike_price(max_reg, geq_reg);
  } apply {
    integration_load_amplitudes(geq_reg, max_reg, integrator_reg, ind_reg);
  }
}

qfunc rainbow_integration(qvars: EstimationVars) {
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x1);
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x2);
  max_out: qnum;
  within {
    affine_max(qvars.x1, qvars.x2, max_out);
  } apply {
    integration_payoff(max_out, qvars.integrator, qvars.ind);
  }
}

qfunc grover_algorithm(k: int, oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  sp_operand(x);
  power (k) {
    grover_operator(oracle_operand, sp_operand, x);
  }
}

qfunc main(k: int, output ind: qbit) {
  qvars: EstimationVars;
  allocate(qvars.size, qvars);
  grover_algorithm(k, qmci_oracle, rainbow_integration, qvars);
  state: qbit[];
  qvars -> {state, ind};
}

cscope ```
iqae_res = iqae(epsilon=EPSILON, alpha=ALPHA)
save({'iqae_res': iqae_res})
```
