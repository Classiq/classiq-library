qfunc apply_matrix_expanded___0(q1: qbit, q2: qbit, q3: qbit) {
  temp: qbit[3];
  within {
    {q1, q2, q3} -> temp;
  } apply {
    unitary([
      [1, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 0, 0, 0, 0, 0, 0],
      [0, 0, 0.5774, 0, 0, 0.8165, 0, 0],
      [0, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 0, 0],
      [
        0,
        0,
        0.8165,
        0,
        0,
        (-0.5774),
        0,
        0
      ],
      [0, 0, 0, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 1]
    ], temp);
  }
}

qfunc apply_U_ab_expanded___0(q: qbit[3]) {
  apply_matrix_expanded___0(q[0], q[1], q[2]);
}

qfunc apply_matrix_expanded___1(q1: qbit, q2: qbit, q3: qbit) {
  temp: qbit[3];
  within {
    {q1, q2, q3} -> temp;
  } apply {
    unitary([
      [1, 0, 0, 0, 0, 0, 0, 0],
      [0, 0.8165, 0, 0, 0.5774, 0, 0, 0],
      [0, 0, 1, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 0, 0],
      [
        0,
        (-0.5774),
        0,
        0,
        0.8165,
        0,
        0,
        0
      ],
      [0, 0, 0, 0, 0, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 1]
    ], temp);
  }
}

qfunc apply_U_f_expanded___0(q: qbit[3]) {
  apply_matrix_expanded___1(q[0], q[1], q[2]);
}

qfunc apply_MultiCNOT_expanded___0(q: qbit[3]) {
  q0: qbit;
  q1: qbit;
  q2: qbit;
  temp_array: qbit[3];
  within {
    q -> {q0, q1, q2};
  } apply {
    within {
      {q0, q1, q2} -> temp_array;
    } apply {
      control (temp_array[0:2]) {
        X(temp_array[2]);
      }
    }
  }
}

qfunc symmetric_compression_algorithm_expanded___0(q_array: qbit[3]) {
  control (q_array[1]) {
    X(q_array[0]);
  }
  control (q_array[0]) {
    H(q_array[1]);
  }
  apply_U_ab_expanded___0(q_array);
  apply_U_f_expanded___0(q_array);
  control (q_array[2]) {
    X(q_array[1]);
  }
  control (q_array[2]) {
    X(q_array[1]);
  }
  control (q_array[2]) {
    X(q_array[0]);
  }
  apply_MultiCNOT_expanded___0(q_array);
}

qfunc main(output x: qbit[3]) {
  allocate(3, x);
  hadamard_transform(x);
  Y(x[0]);
  symmetric_compression_algorithm_expanded___0(x);
}
