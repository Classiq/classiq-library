qfunc encoding_expanded___0(x: qnum<1, False, 0>, ancilla: qnum<3, False, 0>, y: qbit) {
  inplace_prepare_amplitudes([
    0.70710678,
    0.70710678
  ], 0.01, x);
  unitary([
    [1.0, 0.0],
    [0.0, (-1.0)]
  ], y);
  control (y == 0) {
    unitary([
      [
        0.60653377,
        0.60653377,
        0.42888414,
        0.24761637,
        0.12380819,
        0.0553687,
        0.02260418,
        0.00854358
      ],
      [
        0.60653377,
        0.06501961,
        (-0.66113098),
        (-0.38170415),
        (-0.19085207),
        (-0.08535164),
        (-0.03484466),
        (-0.01317004)
      ],
      [
        0.42888414,
        (-0.66113098),
        0.5325098,
        (-0.26990559),
        (-0.1349528),
        (-0.06035272),
        (-0.0246389),
        (-0.00931263)
      ],
      [
        0.24761637,
        (-0.38170415),
        (-0.26990559),
        0.84416993,
        (-0.07791503),
        (-0.03484466),
        (-0.01422527),
        (-0.00537665)
      ],
      [
        0.12380819,
        (-0.19085207),
        (-0.1349528),
        (-0.07791503),
        0.96104248,
        (-0.01742233),
        (-0.00711264),
        (-0.00268832)
      ],
      [
        0.0553687,
        (-0.08535164),
        (-0.06035272),
        (-0.03484466),
        (-0.01742233),
        0.9922085,
        (-0.00318087),
        (-0.00120226)
      ],
      [
        0.02260418,
        (-0.03484466),
        (-0.0246389),
        (-0.01422527),
        (-0.00711264),
        (-0.00318087),
        0.99870142,
        (-0.00049082)
      ],
      [
        0.00854358,
        (-0.01317004),
        (-0.00931263),
        (-0.00537665),
        (-0.00268832),
        (-0.00120226),
        (-0.00049082),
        0.99981449
      ]
    ], ancilla);
  } else {
    unitary([
      [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ]
    ], ancilla);
  }
}

qfunc evolution_expanded___0(x: qnum<1, False, 0>, ancilla: qnum<3, False, 0>) {
  control (ancilla == 0) {
    unitary([[1, 0], [0, 1]], x);
  }
  control (ancilla == 1) {
    unitary([[0, 1], [(-1), 0]], x);
  }
  control (ancilla == 2) {
    unitary([[(-1), 0], [0, (-1)]], x);
  }
  control (ancilla == 3) {
    unitary([[0, (-1)], [1, 0]], x);
  }
  control (ancilla == 4) {
    unitary([[1, 0], [0, 1]], x);
  }
  control (ancilla == 5) {
    unitary([[0, 1], [(-1), 0]], x);
  }
  control (ancilla == 6) {
    unitary([[(-1), 0], [0, (-1)]], x);
  }
  control (ancilla == 7) {
    unitary([[0, (-1)], [1, 0]], x);
  }
}

qfunc decoding_expanded___0(ancilla: qnum<3, False, 0>, y: qbit) {
  control (y == 0) {
    unitary([
      [
        0.60653377,
        0.60653377,
        0.42888414,
        0.24761637,
        0.12380819,
        0.0553687,
        0.02260418,
        0.00854358
      ],
      [
        0.60653377,
        0.06501961,
        (-0.66113098),
        (-0.38170415),
        (-0.19085207),
        (-0.08535164),
        (-0.03484466),
        (-0.01317004)
      ],
      [
        0.42888414,
        (-0.66113098),
        0.5325098,
        (-0.26990559),
        (-0.1349528),
        (-0.06035272),
        (-0.0246389),
        (-0.00931263)
      ],
      [
        0.24761637,
        (-0.38170415),
        (-0.26990559),
        0.84416993,
        (-0.07791503),
        (-0.03484466),
        (-0.01422527),
        (-0.00537665)
      ],
      [
        0.12380819,
        (-0.19085207),
        (-0.1349528),
        (-0.07791503),
        0.96104248,
        (-0.01742233),
        (-0.00711264),
        (-0.00268832)
      ],
      [
        0.0553687,
        (-0.08535164),
        (-0.06035272),
        (-0.03484466),
        (-0.01742233),
        0.9922085,
        (-0.00318087),
        (-0.00120226)
      ],
      [
        0.02260418,
        (-0.03484466),
        (-0.0246389),
        (-0.01422527),
        (-0.00711264),
        (-0.00318087),
        0.99870142,
        (-0.00049082)
      ],
      [
        0.00854358,
        (-0.01317004),
        (-0.00931263),
        (-0.00537665),
        (-0.00268832),
        (-0.00120226),
        (-0.00049082),
        0.99981449
      ]
    ], ancilla);
  } else {
    unitary([
      [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ]
    ], ancilla);
  }
  unitary([
    [1.0, 0.0],
    [0.0, (-1.0)]
  ], y);
}

qfunc main(output x: qnum<1, False, 0>, output ancilla: qnum<3, False, 0>, output y: qbit) {
  allocate(1, x);
  allocate(3, ancilla);
  allocate(1, y);
  encoding_expanded___0(x, ancilla, y);
  evolution_expanded___0(x, ancilla);
  decoding_expanded___0(ancilla, y);
}
