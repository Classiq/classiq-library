qfunc unitary_K(block: qbit[]) {
  RY(1.7722, block[0]);
  control (block[0]) {
    RY(1.5708, block[1]);
  }
  control (block[0:2]) {
    X(block[2]);
  }
}

qfunc L_shift(jarr: qbit[]) {
  repeat (i: jarr.len - 1) {
    control (jarr[0:((jarr.len - 1) - i)]) {
      X(jarr[(jarr.len - 1) - i]);
    }
  }
  X(jarr[0]);
}

qfunc C_shiftAdder_SWAP(j_array: qbit[], block_array: qbit[]) {
  within {
    control (j_array[0]) {
      L_shift(block_array[0:3]);
    }
    control (j_array[1]) {
      L_shift(block_array[1:3]);
    }
    control (j_array[2]) {
      X(block_array[2]);
    }
  } apply {
    SWAP(block_array[0], j_array[0]);
    SWAP(block_array[1], j_array[1]);
    SWAP(block_array[2], j_array[2]);
  }
}

qfunc BE_stochastic(block: qnum, state: qnum) {
  within {
    unitary_K(block);
  } apply {
    C_shiftAdder_SWAP(state, block);
  }
}

qfunc main(output block: qnum, output state: qnum) {
  allocate(3, block);
  allocate(3, state);
  hadamard_transform(state);
  BE_stochastic(block, state);
}
