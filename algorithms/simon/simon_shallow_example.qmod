qfunc simon_qfunc_with_bipartite_s(partition_index: int, x: qbit[], output res: qbit[]) {
  allocate(x.len, res);
  repeat (i: x.len - partition_index) {
    CX(x[i], res[i]);
  }
  repeat (i: partition_index - 1) {
    CX(x[((x.len - partition_index) + 1) + i], res[((x.len - partition_index) + 1) + i]);
    CX(x[x.len - partition_index], res[((x.len - partition_index) + 1) + i]);
  }
}

qfunc simon_qfunc(f_qfunc: qfunc (qnum, output qnum), x: qnum) {
  res: qnum;
  hadamard_transform(x);
  f_qfunc(x, res);
  hadamard_transform(x);
}

qfunc main(output x: qnum) {
  allocate(6, x);
  simon_qfunc(lambda(x, res) {
    simon_qfunc_with_bipartite_s(4, x, res);
  }, x);
}
