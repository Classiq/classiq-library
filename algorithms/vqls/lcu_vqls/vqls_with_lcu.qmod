qfunc apply_ry_on_all_expanded___0(params: real[], io: qbit[3]) {
  repeat (index: 3) {
    RY(params[index], io[index]);
  }
}

qfunc apply_fixed_3_qubit_system_ansatz_expanded___0(angles: real[9], system_qubits: qbit[3]) {
  apply_ry_on_all_expanded___0([
    angles[0],
    angles[1],
    angles[2]
  ], system_qubits);
  repeat (index: 2) {
    CZ(system_qubits[0], system_qubits[index + 1]);
  }
  CZ(system_qubits[1], system_qubits[2]);
  apply_ry_on_all_expanded___0([
    angles[3],
    angles[4],
    angles[5]
  ], system_qubits);
  repeat (index: 2) {
    CZ(system_qubits[2], system_qubits[index]);
  }
  CZ(system_qubits[1], system_qubits[0]);
  apply_ry_on_all_expanded___0([
    angles[6],
    angles[7],
    angles[8]
  ], system_qubits);
}

qfunc ansatz_0_lambda___0_0_expanded___0(params_captured__main__0: real[9], system_qubits_captured__main__0: qnum<3, False, 0>) {
  apply_fixed_3_qubit_system_ansatz_expanded___0(params_captured__main__0, system_qubits_captured__main__0);
}

qfunc cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, const x_captured__apply_pauli_term__6: qbit[3]) {
  IDENTITY(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  X(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  Y(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, const x_captured__apply_pauli_term__6: qbit[3]) {
  Z(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc switch_expanded___0(selector: int, pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  if (selector == 0) {
    cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
  } else {
    if (selector == 1) {
      cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
    } else {
      if (selector == 2) {
        cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
      } else {
        if (selector == 3) {
          cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___0(pauli_string: IndexedPauli[], x: qbit[3]) {
  repeat (i: 1) {
    switch_expanded___0(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__3: qbit[3]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=0, index=0}
  ], data_captured__lcu_pauli__3);
}

qfunc cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, const x_captured__apply_pauli_term__6: qbit[3]) {
  IDENTITY(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  X(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  Y(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, const x_captured__apply_pauli_term__6: qbit[3]) {
  Z(x_captured__apply_pauli_term__6[pauli_string_captured__apply_pauli_term__6[i_captured__apply_pauli_term__6].index]);
}

qfunc switch_expanded___1(selector: int, pauli_string_captured__apply_pauli_term__6: IndexedPauli[], i_captured__apply_pauli_term__6: int, permutable x_captured__apply_pauli_term__6: qbit[3]) {
  if (selector == 0) {
    cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
  } else {
    if (selector == 1) {
      cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
    } else {
      if (selector == 2) {
        cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
      } else {
        if (selector == 3) {
          cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__6, i_captured__apply_pauli_term__6, x_captured__apply_pauli_term__6);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___1(pauli_string: IndexedPauli[], x: qbit[3]) {
  repeat (i: 3) {
    switch_expanded___1(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__3: qbit[3]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=0, index=0},
    IndexedPauli {pauli=3, index=1},
    IndexedPauli {pauli=0, index=2}
  ], data_captured__lcu_pauli__3);
}

qfunc unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__3: qbit[3]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=0, index=0},
    IndexedPauli {pauli=0, index=1},
    IndexedPauli {pauli=3, index=2}
  ], data_captured__lcu_pauli__3);
}

qfunc apply_phase_table_expanded___0(target: qbit[2]) {
  PHASE(0, target[0]);
  CX(target[0], target[1]);
  PHASE(0, target[1]);
  CX(target[0], target[1]);
  PHASE(0, target[1]);
}

qfunc lcu_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__3: qbit[3]) {
  within {
    inplace_prepare_state([0.55, 0.225, 0.225, 0.0], 0, block);
  } apply {
    repeat (i: 3) {
      control (block == i) {
        if (i == 0) {
          unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__3);
        } else {
          if (i == 1) {
            unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__3);
          } else {
            if (i == 2) {
              unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__3);
            }
          }
        }
      }
    }
    apply_phase_table_expanded___0(block);
  }
}

qfunc lcu_pauli_expanded___0(data: qbit[3], block: qnum<2, False, 0>) {
  lcu_expanded___0(block, data);
}

qfunc block_encoding_0_lambda___0_0_expanded___0(system_qubits_captured__main__0: qnum<3, False, 0>, ancillary_qubits_captured__main__0: qnum<2, False, 0>) {
  lcu_pauli_expanded___0(system_qubits_captured__main__0, ancillary_qubits_captured__main__0);
}

qfunc apply_to_all_expanded___0(target: qbit[3]) {
  repeat (index: 3) {
    H(target[index]);
  }
}

qfunc prepare_b_state_0_lambda___0_0_expanded___0(system_qubits_captured__main__0: qnum<3, False, 0>) {
  apply_to_all_expanded___0(system_qubits_captured__main__0);
}

qfunc block_encoding_vqls_expanded___0(params_captured__main__0: real[9], ancillary_qubits_captured__main__0: qnum<2, False, 0>, system_qubits_captured__main__0: qnum<3, False, 0>) {
  ansatz_0_lambda___0_0_expanded___0(params_captured__main__0, system_qubits_captured__main__0);
  block_encoding_0_lambda___0_0_expanded___0(system_qubits_captured__main__0, ancillary_qubits_captured__main__0);
  invert {
    prepare_b_state_0_lambda___0_0_expanded___0(system_qubits_captured__main__0);
  }
}

qfunc main(params: real[9], output ancillary_qubits: qnum<2, False, 0>, output system_qubits: qnum<3, False, 0>) {
  allocate(2, ancillary_qubits);
  allocate(3, system_qubits);
  block_encoding_vqls_expanded___0(params, ancillary_qubits, system_qubits);
}
