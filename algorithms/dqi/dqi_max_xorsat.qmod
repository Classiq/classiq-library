qfunc inplace_binary_to_one_hot_expanded___0(one_hot: qbit[4]) {
  temp_0: qbit;
  temp_1: qbit;
  temp_2: qbit;
  temp_3: qbit;
  one_hot -> {temp_0, temp_1, temp_2, temp_3};
  {temp_2, temp_0, temp_3, temp_1} -> one_hot;
  X(one_hot[0]);
  CX(one_hot[1], one_hot[0]);
  control (one_hot[3]) {
    SWAP(one_hot[0], one_hot[2]);
  }
  CX(one_hot[2], one_hot[3]);
  CX(one_hot[3], one_hot[1]);
}

qfunc binary_to_one_hot_expanded___0(input binary: qnum<2, False, 0>, output one_hot: qbit[4]) {
  extension: qbit[2];
  allocate(2, extension);
  {binary, extension} -> one_hot;
  inplace_binary_to_one_hot_expanded___0(one_hot);
}

qfunc inplace_one_hot_to_unary(qvar: qbit[]) {
  repeat (i: qvar.len - 1) {
    CX(qvar[(qvar.len - i) - 1], qvar[(qvar.len - i) - 2]);
  }
  X(qvar[0]);
}

qfunc one_hot_to_unary_expanded___0(input one_hot: qbit[4], output unary: qbit[3]) {
  inplace_one_hot_to_unary(one_hot);
  lsb: qbit;
  one_hot -> {lsb, unary};
  free(lsb);
}

qfunc binary_to_unary_expanded___0(input binary: qnum<2, False, 0>, output unary: qbit[3]) {
  one_hot: qbit[4];
  binary_to_one_hot_expanded___0(binary, one_hot);
  one_hot_to_unary_expanded___0(one_hot, unary);
}

qfunc pad_zeros_expanded___0(input qvar: qbit[3], output qvar_padded: qbit[6]) {
  extension: qbit[3];
  allocate(3, extension);
  {qvar, extension} -> qvar_padded;
}

qfunc _dicke_split_cycle_shift_expanded___0(qvar: qbit[6]) {
  within {
    CX(qvar[1], qvar[0]);
  } apply {
    control (qvar[0]) {
      RY(2.300523983021863, qvar[1]);
    }
  }
  within {
    CX(qvar[2], qvar[0]);
  } apply {
    control (qvar[0] & qvar[1]) {
      RY(1.9106332362490186, qvar[2]);
    }
  }
}

qfunc _dicke_split_cycle_shift_expanded___1(qvar: qbit[5]) {
  within {
    CX(qvar[1], qvar[0]);
  } apply {
    control (qvar[0]) {
      RY(2.214297435588181, qvar[1]);
    }
  }
  within {
    CX(qvar[2], qvar[0]);
  } apply {
    control (qvar[0] & qvar[1]) {
      RY(1.7721542475852274, qvar[2]);
    }
  }
}

qfunc _dicke_split_cycle_shift_expanded___2(qvar: qbit[4]) {
  within {
    CX(qvar[1], qvar[0]);
  } apply {
    control (qvar[0]) {
      RY(2.0943951023931957, qvar[1]);
    }
  }
  within {
    CX(qvar[2], qvar[0]);
  } apply {
    control (qvar[0] & qvar[1]) {
      RY(1.5707963267948968, qvar[2]);
    }
  }
}

qfunc _dicke_split_cycle_shift_expanded___3(qvar: qbit[3]) {
  within {
    CX(qvar[1], qvar[0]);
  } apply {
    control (qvar[0]) {
      RY(1.9106332362490186, qvar[1]);
    }
  }
  within {
    CX(qvar[2], qvar[0]);
  } apply {
    control (qvar[0] & qvar[1]) {
      RY(1.2309594173407747, qvar[2]);
    }
  }
}

qfunc _dicke_split_cycle_shift_expanded___4(qvar: qbit[2]) {
  within {
    CX(qvar[1], qvar[0]);
  } apply {
    control (qvar[0]) {
      RY(1.5707963267948968, qvar[1]);
    }
  }
}

qfunc prepare_dick_state_unary_input_expanded___0(qvar: qbit[1]) {
}

qfunc prepare_dick_state_unary_input_expanded___1(qvar: qbit[2]) {
  _dicke_split_cycle_shift_expanded___4(qvar);
  prepare_dick_state_unary_input_expanded___0(qvar[1:2]);
}

qfunc prepare_dick_state_unary_input_expanded___2(qvar: qbit[3]) {
  _dicke_split_cycle_shift_expanded___3(qvar);
  prepare_dick_state_unary_input_expanded___1(qvar[1:3]);
}

qfunc prepare_dick_state_unary_input_expanded___3(qvar: qbit[4]) {
  _dicke_split_cycle_shift_expanded___2(qvar);
  prepare_dick_state_unary_input_expanded___2(qvar[1:4]);
}

qfunc prepare_dick_state_unary_input_expanded___4(qvar: qbit[5]) {
  _dicke_split_cycle_shift_expanded___1(qvar);
  prepare_dick_state_unary_input_expanded___3(qvar[1:5]);
}

qfunc prepare_dick_state_unary_input_expanded___5(qvar: qbit[6]) {
  _dicke_split_cycle_shift_expanded___0(qvar);
  prepare_dick_state_unary_input_expanded___4(qvar[1:6]);
}

qfunc vector_product_phase(v: int[], y: qbit[]) {
  repeat (i: y.len) {
    if (v[i] > 0) {
      Z(y[i]);
    }
  }
}

qfunc matrix_vector_product_expanded___0(y: qbit[6], output out: qbit[6]) {
  allocate(6, out);
  out[0] ^= ((((y[0] ^ y[1]) ^ 0) ^ 0) ^ 0) ^ 0;
  out[1] ^= ((((y[0] ^ 0) ^ y[2]) ^ 0) ^ 0) ^ 0;
  out[2] ^= (((0 ^ y[2]) ^ y[3]) ^ 0) ^ 0;
  out[3] ^= ((0 ^ y[3]) ^ y[4]) ^ 0;
  out[4] ^= ((((0 ^ y[1]) ^ 0) ^ 0) ^ 0) ^ y[5];
  out[5] ^= (0 ^ y[4]) ^ y[5];
}

qfunc syndrome_decode_lookuptable(syndrome: qnum, error: qnum) {
  control (syndrome == 0) {
    error ^= 0;
  }
  control (syndrome == 3) {
    error ^= 1;
  }
  control (syndrome == 17) {
    error ^= 2;
  }
  control (syndrome == 6) {
    error ^= 4;
  }
  control (syndrome == 12) {
    error ^= 8;
  }
  control (syndrome == 40) {
    error ^= 16;
  }
  control (syndrome == 48) {
    error ^= 32;
  }
  control (syndrome == 18) {
    error ^= 3;
  }
  control (syndrome == 5) {
    error ^= 5;
  }
  control (syndrome == 15) {
    error ^= 9;
  }
  control (syndrome == 43) {
    error ^= 17;
  }
  control (syndrome == 51) {
    error ^= 33;
  }
  control (syndrome == 23) {
    error ^= 6;
  }
  control (syndrome == 29) {
    error ^= 10;
  }
  control (syndrome == 57) {
    error ^= 18;
  }
  control (syndrome == 33) {
    error ^= 34;
  }
  control (syndrome == 10) {
    error ^= 12;
  }
  control (syndrome == 46) {
    error ^= 20;
  }
  control (syndrome == 54) {
    error ^= 36;
  }
  control (syndrome == 36) {
    error ^= 24;
  }
  control (syndrome == 60) {
    error ^= 40;
  }
  control (syndrome == 24) {
    error ^= 48;
  }
}

qfunc dqi_max_xor_sat_expanded___0(output y: qbit[6], output solution: qbit[6]) {
  k_num_errors: qnum<2, False, 0>;
  prepare_amplitudes([
    0.0,
    0.7071067811865475,
    0.7071067811865477,
    0.0
  ], 0, k_num_errors);
  k_unary: qbit[3];
  binary_to_unary_expanded___0(k_num_errors, k_unary);
  pad_zeros_expanded___0(k_unary, y);
  prepare_dick_state_unary_input_expanded___5(y);
  vector_product_phase([1.0, 1.0, 1.0, 1.0, 1.0, 1.0], y);
  matrix_vector_product_expanded___0(y, solution);
  syndrome_decode_lookuptable(solution, y);
  hadamard_transform(solution);
}

qfunc main(output y: qbit[6], output solution: qbit[6]) {
  dqi_max_xor_sat_expanded___0(y, solution);
}
