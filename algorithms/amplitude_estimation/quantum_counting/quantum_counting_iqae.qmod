DOMAIN_SIZE_QCONST: int = 4;

qstruct OracleVars {
  a: qnum<2, False, 0>;
  b: qnum<2, False, 0>;
}

qstruct IQAEVars {
  state: OracleVars;
  ind: qbit;
}

qfunc iqae_oracle(vars: IQAEVars) {
  Z(vars.ind);
}

qfunc arith_equation(a: qnum, b: qnum, res: qbit) {
  res ^= (a + b) <= 2;
}

qfunc iqae_state_preparation(vars: IQAEVars) {
  hadamard_transform(vars.state);
  arith_equation(vars.state.a, vars.state.b, vars.ind);
}

qfunc reflection_about_zero(x: qbit[]) {
  lsb: qbit;
  msbs: qbit[x.len - 1];
  apply_to_all(X, x);
  x -> {msbs, lsb};
  control (msbs) {
    Z(lsb);
  }
  {msbs, lsb} -> x;
  apply_to_all(X, x);
}

qfunc my_diffuser(sp_operand: qfunc (qbit[]), x: qbit[]) {
  within {
    invert {
      sp_operand(x);
    }
  } apply {
    reflection_about_zero(x);
  }
}

qfunc my_grover_operator(oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  oracle_operand(x);
  my_diffuser(sp_operand, x);
  U(0, 0, 0, 3.1416, x[0]);
}

qfunc my_iqae_algorithm(k: int, oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: IQAEVars) {
  sp_operand(x);
  power (k) {
    my_grover_operator(oracle_operand, sp_operand, x);
  }
}

qfunc main(k: int, output ind_reg: qbit) {
  full_reg: IQAEVars;
  allocate(full_reg.size, full_reg);
  my_iqae_algorithm(k, iqae_oracle, iqae_state_preparation, full_reg);
  state_reg: OracleVars;
  full_reg -> {state_reg, ind_reg};
}

cscope ```
iqae_res = iqae(epsilon=1 / (2 ** DOMAIN_SIZE_QCONST * 2), alpha=0.01)
save({'iqae_res': iqae_res})
```
