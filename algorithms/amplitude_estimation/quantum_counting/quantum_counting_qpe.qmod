qfunc arith_equation(a: qnum, b: qnum, res: qbit) {
  res ^= (a + b) <= 2;
}

qfunc arith_oracle(a: qnum, b: qnum) {
  aux: qbit;
  within {
    allocate<1>(aux);
    X(aux);
    H(aux);
  } apply {
    arith_equation(a, b, aux);
  }
}

qfunc reflection_about_zero(x: qbit[]) {
  lsb: qbit;
  msbs: qbit[len(x) - 1];
  apply_to_all<X>(x);
  x -> {msbs, lsb};
  control (msbs) {
    Z(lsb);
  }
  {msbs, lsb} -> x;
  apply_to_all<X>(x);
}

qfunc my_diffuser<sp_operand: qfunc (arg0: qbit[])>(x: qbit[]) {
  within {
    invert {
      sp_operand(x);
    }
  } apply {
    reflection_about_zero(x);
  }
}

qfunc my_grover_operator<oracle_operand: qfunc (arg0: qbit[]), sp_operand: qfunc (arg0: qbit[])>(x: qbit[]) {
  oracle_operand(x);
  my_diffuser<sp_operand>(x);
  U<0, 0, 0, 3.1416>(x[0]);
}

qfunc main(output phase_reg: qnum) {
  state_reg: qbit[];
  allocate<4>(state_reg);
  allocate_num<5, False, 5>(phase_reg);
  hadamard_transform(state_reg);
  qpe<lambda() {
    my_grover_operator<lambda(arg0) {
      arith_oracle(arg0[0:2], arg0[2:len(arg0)]);
    }, lambda(arg0) {
      hadamard_transform(arg0);
    }>(state_reg);
  }>(phase_reg);
}
