qstruct OracleVars {
  a: qnum<2, False, 0>;
  b: qnum<2, False, 0>;
}

qfunc arith_equation(a: qnum, b: qnum, res: qbit) {
  res ^= (a + b) <= 2;
}

qfunc arith_oracle(state: OracleVars) {
  aux: qbit;
  within {
    allocate(1, aux);
    X(aux);
    H(aux);
  } apply {
    arith_equation(state.a, state.b, aux);
  }
}

qfunc reflection_about_zero(x: qbit[]) {
  lsb: qbit;
  msbs: qbit[x.len - 1];
  apply_to_all(X, x);
  x -> {msbs, lsb};
  control (msbs) {
    Z(lsb);
  }
  {msbs, lsb} -> x;
  apply_to_all(X, x);
}

qfunc my_diffuser(sp_operand: qfunc (qbit[]), x: qbit[]) {
  within {
    invert {
      sp_operand(x);
    }
  } apply {
    reflection_about_zero(x);
  }
}

qfunc my_grover_operator(oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  oracle_operand(x);
  my_diffuser(sp_operand, x);
  U(0, 0, 0, 3.1416, x[0]);
}

qfunc main(output phase_reg: qnum) {
  state_reg: OracleVars;
  allocate(state_reg.size, state_reg);
  allocate_num(5, False, 5, phase_reg);
  hadamard_transform(state_reg);
  qpe(lambda() {
    my_grover_operator(arith_oracle, lambda(x) {
      hadamard_transform(x);
    }, state_reg);
  }, phase_reg);
}
