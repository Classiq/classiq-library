qfunc discrete_log_oracle(g_generator: int, x_element: int, N_modulus: int, x1: qbit[], x2: qbit[], output func_res: qbit[]) {
  allocate(ceiling(log(N_modulus, 2)), func_res);
  inplace_prepare_int(1, func_res);
  modular_exp(N_modulus, x_element, func_res, x1);
  modular_exp(N_modulus, g_generator, func_res, x2);
}

qfunc discrete_log(g: int, x: int, N: int, order: int, output x1: qnum, output x2: qnum, output func_res: qnum) {
  allocate_num(ceiling(log(order, 2)) + 1, False, ceiling(log(order, 2)) + 1, x1);
  allocate_num(ceiling(log(order, 2)) + 1, False, ceiling(log(order, 2)) + 1, x2);
  prepare_uniform_trimmed_state(12, x1);
  prepare_uniform_trimmed_state(12, x2);
  discrete_log_oracle(g, x, N, x1, x2, func_res);
  invert {
    qft(x1);
  }
  invert {
    qft(x2);
  }
}

qfunc main(output x1: qnum, output x2: qnum, output func_res: qnum) {
  discrete_log(7, 3, 13, 12, x1, x2, func_res);
}
