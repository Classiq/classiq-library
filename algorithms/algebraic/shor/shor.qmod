qfunc hadamard_transform_expanded___0(target: qbit[10]) {
  repeat (index: 10) {
    H(target[index]);
  }
}

qfunc qft_no_swap_expanded___0(qbv: qbit[6]) {
  repeat (i: 6) {
    H(qbv[i]);
    repeat (j: 5 - i) {
      CPHASE(3.1416 * (2.0 ** ((-j) - 1.0)), qbv[(i + j) + 1], qbv[i]);
    }
  }
}

qfunc qft_expanded___0(target: qbit[6]) {
  repeat (index: 3.0) {
    SWAP(target[index], target[5 - index]);
  }
  qft_no_swap_expanded___0(target);
}

qfunc phase_lad_expanded___0(phi_b: qbit[6]) {
  PHASE(1.0799, phi_b[0]);
  PHASE(2.1598, phi_b[1]);
  PHASE(4.3197, phi_b[2]);
  PHASE(2.3562, phi_b[3]);
  PHASE(4.7124, phi_b[4]);
  PHASE(3.1416, phi_b[5]);
}

qfunc phase_lad_expanded___1(phi_b: qbit[6]) {
  PHASE(2.0617, phi_b[0]);
  PHASE(4.1233, phi_b[1]);
  PHASE(1.9635, phi_b[2]);
  PHASE(3.927, phi_b[3]);
  PHASE(1.5708, phi_b[4]);
  PHASE(3.1416, phi_b[5]);
}

qfunc my_qft_step_expanded___0(qbv: qbit[]) {
  H(qbv[0]);
  repeat (index: (-1) + qbv.len) {
    CPHASE(3.1416 * (2.0 ** ((-index) - 1.0)), qbv[0], qbv[index + 1]);
  }
}

qfunc qft_ns_expanded___0(qbv: qbit[6]) {
  repeat (index: 6) {
    my_qft_step_expanded___0(qbv[index:6]);
  }
}

qfunc ctrl_x_expanded___0(ctrl: qnum<1, False, 0>, aux: qbit) {
  control (ctrl == 1) {
    X(aux);
  }
}

qfunc check_msb_expanded___0(x: qbit[6], aux: qbit) {
  within {
    invert {
      qft_ns_expanded___0(x);
    }
  } apply {
    ctrl_x_expanded___0(x[0], aux);
  }
}

qfunc ctrl_x_expanded___1(ctrl: qnum<1, False, 0>, aux: qbit) {
  control (ctrl == 0) {
    X(aux);
  }
}

qfunc check_msb_expanded___1(x: qbit[6], aux: qbit) {
  within {
    invert {
      qft_ns_expanded___0(x);
    }
  } apply {
    ctrl_x_expanded___1(x[0], aux);
  }
}

qfunc ccmod_add_expanded___0(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___0(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___0(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc phase_lad_expanded___2(phi_b: qbit[6]) {
  PHASE(0.0982, phi_b[0]);
  PHASE(0.1963, phi_b[1]);
  PHASE(0.3927, phi_b[2]);
  PHASE(0.7854, phi_b[3]);
  PHASE(1.5708, phi_b[4]);
  PHASE(3.1416, phi_b[5]);
}

qfunc ccmod_add_expanded___1(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___2(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___2(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc phase_lad_expanded___3(phi_b: qbit[6]) {
  PHASE(0.1963, phi_b[0]);
  PHASE(0.3927, phi_b[1]);
  PHASE(0.7854, phi_b[2]);
  PHASE(1.5708, phi_b[3]);
  PHASE(3.1416, phi_b[4]);
  PHASE(0, phi_b[5]);
}

qfunc ccmod_add_expanded___2(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___3(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___3(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc phase_lad_expanded___4(phi_b: qbit[6]) {
  PHASE(0.3927, phi_b[0]);
  PHASE(0.7854, phi_b[1]);
  PHASE(1.5708, phi_b[2]);
  PHASE(3.1416, phi_b[3]);
  PHASE(0, phi_b[4]);
  PHASE(0, phi_b[5]);
}

qfunc ccmod_add_expanded___3(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___4(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___4(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc phase_lad_expanded___5(phi_b: qbit[6]) {
  PHASE(0.7854, phi_b[0]);
  PHASE(1.5708, phi_b[1]);
  PHASE(3.1416, phi_b[2]);
  PHASE(0, phi_b[3]);
  PHASE(0, phi_b[4]);
  PHASE(0, phi_b[5]);
}

qfunc ccmod_add_expanded___4(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___5(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___5(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc cmod_mult_expanded___0(b: qbit[6], x: qbit[5], ctrl: qbit) {
  within {
    qft_expanded___0(b);
  } apply {
    ccmod_add_expanded___0(b, x[0], ctrl);
    ccmod_add_expanded___1(b, x[1], ctrl);
    ccmod_add_expanded___2(b, x[2], ctrl);
    ccmod_add_expanded___3(b, x[3], ctrl);
    ccmod_add_expanded___4(b, x[4], ctrl);
  }
}

qfunc multi_swap_expanded___0(x: qbit[5], y: qbit[6]) {
  repeat (index: 5) {
    SWAP(x[index], y[index]);
  }
}

qfunc phase_lad_expanded___6(phi_b: qbit[6]) {
  PHASE(1.5708, phi_b[0]);
  PHASE(3.1416, phi_b[1]);
  PHASE(0, phi_b[2]);
  PHASE(0, phi_b[3]);
  PHASE(0, phi_b[4]);
  PHASE(0, phi_b[5]);
}

qfunc ccmod_add_expanded___5(phi_b: qbit[6], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___6(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb_expanded___0(phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___6(phi_b);
        }
      }
    } apply {
      check_msb_expanded___1(phi_b, aux);
    }
  }
}

qfunc cmod_mult_expanded___1(b: qbit[6], x: qbit[5], ctrl: qbit) {
  within {
    qft_expanded___0(b);
  } apply {
    ccmod_add_expanded___2(b, x[0], ctrl);
    ccmod_add_expanded___3(b, x[1], ctrl);
    ccmod_add_expanded___4(b, x[2], ctrl);
    ccmod_add_expanded___5(b, x[3], ctrl);
    ccmod_add_expanded___0(b, x[4], ctrl);
  }
}

qfunc cmod_mult_pair_expanded___0(x: qbit[5], ctrl: qbit) {
  b: qbit[6];
  allocate(6, b);
  cmod_mult_expanded___0(b, x, ctrl);
  control (ctrl) {
    multi_swap_expanded___0(x, b);
  }
  invert {
    cmod_mult_expanded___1(b, x, ctrl);
  }
  free(b);
}

qfunc cmod_mult_expanded___2(b: qbit[6], x: qbit[5], ctrl: qbit) {
  within {
    qft_expanded___0(b);
  } apply {
    ccmod_add_expanded___5(b, x[0], ctrl);
    ccmod_add_expanded___0(b, x[1], ctrl);
    ccmod_add_expanded___1(b, x[2], ctrl);
    ccmod_add_expanded___2(b, x[3], ctrl);
    ccmod_add_expanded___3(b, x[4], ctrl);
  }
}

qfunc cmod_mult_expanded___3(b: qbit[6], x: qbit[5], ctrl: qbit) {
  within {
    qft_expanded___0(b);
  } apply {
    ccmod_add_expanded___3(b, x[0], ctrl);
    ccmod_add_expanded___4(b, x[1], ctrl);
    ccmod_add_expanded___5(b, x[2], ctrl);
    ccmod_add_expanded___0(b, x[3], ctrl);
    ccmod_add_expanded___1(b, x[4], ctrl);
  }
}

qfunc cmod_mult_pair_expanded___1(x: qbit[5], ctrl: qbit) {
  b: qbit[6];
  allocate(6, b);
  cmod_mult_expanded___2(b, x, ctrl);
  control (ctrl) {
    multi_swap_expanded___0(x, b);
  }
  invert {
    cmod_mult_expanded___3(b, x, ctrl);
  }
  free(b);
}

qfunc cmod_mult_pair_expanded___2(x: qbit[5], ctrl: qbit) {
  b: qbit[6];
  allocate(6, b);
  cmod_mult_expanded___3(b, x, ctrl);
  control (ctrl) {
    multi_swap_expanded___0(x, b);
  }
  invert {
    cmod_mult_expanded___2(b, x, ctrl);
  }
  free(b);
}

qfunc mod_exp_func_expanded___0(x: qbit[5], pow: qbit[10]) {
  cmod_mult_pair_expanded___0(x, pow[0]);
  cmod_mult_pair_expanded___1(x, pow[1]);
  cmod_mult_pair_expanded___2(x, pow[2]);
  cmod_mult_pair_expanded___1(x, pow[3]);
  cmod_mult_pair_expanded___2(x, pow[4]);
  cmod_mult_pair_expanded___1(x, pow[5]);
  cmod_mult_pair_expanded___2(x, pow[6]);
  cmod_mult_pair_expanded___1(x, pow[7]);
  cmod_mult_pair_expanded___2(x, pow[8]);
  cmod_mult_pair_expanded___1(x, pow[9]);
}

qfunc qft_no_swap_expanded___1(qbv: qbit[10]) {
  repeat (i: 10) {
    H(qbv[i]);
    repeat (j: 9 - i) {
      CPHASE(3.1416 * (2.0 ** ((-j) - 1.0)), qbv[(i + j) + 1], qbv[i]);
    }
  }
}

qfunc qft_expanded___1(target: qbit[10]) {
  repeat (index: 5.0) {
    SWAP(target[index], target[9 - index]);
  }
  qft_no_swap_expanded___1(target);
}

qfunc main(output x: qnum<5, False, 0>, output pow: qnum<10, False, 0>) {
  allocate(5, x);
  allocate(10, pow);
  hadamard_transform_expanded___0(pow);
  x ^= 1;
  mod_exp_func_expanded___0(x, pow);
  invert {
    qft_expanded___1(pow);
  }
}
