qfunc phase_lad(value: int, phi_b: qbit[]) {
  repeat (index: phi_b.len) {
    PHASE(qft_const_adder_phase(index, value, phi_b.len), phi_b[index]);
  }
}

qfunc my_qft_step(qbv: qbit[]) {
  H(qbv[0]);
  repeat (index: qbv.len - 1) {
    CPHASE(pi / (2 ** (index + 1)), qbv[0], qbv[index + 1]);
  }
}

qfunc qft_ns(qbv: qbit[]) {
  repeat (index: qbv.len) {
    my_qft_step(qbv[index:qbv.len]);
  }
}

qfunc ctrl_x(ref: int, ctrl: qnum, aux: qbit) {
  control (ctrl == ref) {
    X(aux);
  }
}

qfunc check_msb(ref: int, x: qbit[], aux: qbit) {
  within {
    invert {
      qft_ns(x);
    }
  } apply {
    ctrl_x(ref, x[0], aux);
  }
}

qfunc ccmod_add(N: int, a: int, phi_b: qbit[], c1: qbit, c2: qbit) {
  ctrl: qbit[];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad(a, phi_b);
    }
    invert {
      phase_lad(N, phi_b);
    }
    check_msb(1, phi_b, aux);
    control (aux) {
      phase_lad(N, phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad(a, phi_b);
        }
      }
    } apply {
      check_msb(0, phi_b, aux);
    }
  }
}

qfunc cmod_mult(N: int, a: int, b: qbit[], x: qbit[], ctrl: qbit) {
  within {
    qft(b);
  } apply {
    repeat (index: x.len) {
      ccmod_add(N, (a * (2 ** index)) % N, b, x[index], ctrl);
    }
  }
}

qfunc multi_swap(x: qbit[], y: qbit[]) {
  repeat (index: min(x.len, y.len)) {
    SWAP(x[index], y[index]);
  }
}

qfunc cmod_mult_pair(N: int, a: int, x: qbit[], ctrl: qbit) {
  b: qbit[];
  allocate(x.len + 1, b);
  cmod_mult(N, a, b, x, ctrl);
  control (ctrl) {
    multi_swap(x, b);
  }
  invert {
    cmod_mult(N, mod_inverse(a, N), b, x, ctrl);
  }
  free(b);
}

qfunc mod_exp_func(N: int, a: int, x: qbit[], power: qbit[]) {
  repeat (index: power.len) {
    cmod_mult_pair(N, (a ** (2 ** index)) % N, x, power[index]);
  }
}

qfunc main(output x: qnum, output power: qnum) {
  allocate(5, x);
  allocate(10, power);
  hadamard_transform(power);
  x ^= 1;
  mod_exp_func(21, 11, x, power);
  invert {
    qft(power);
  }
}
