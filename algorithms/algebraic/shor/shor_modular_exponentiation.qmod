qfunc phase_lad<value: int>(phi_b: qbit[]) {
  repeat (index: len(phi_b)) {
    PHASE<qft_const_adder_phase(index, value, len(phi_b))>(phi_b[index]);
  }
}

qfunc my_qft_step(qbv: qbit[]) {
  H(qbv[0]);
  repeat (index: len(qbv) - 1) {
    CPHASE<pi / (2 ** (index + 1))>(qbv[0], qbv[(index) + 1]);
  }
}

qfunc qft_ns(qbv: qbit[]) {
  repeat (index: len(qbv)) {
    my_qft_step(qbv[index:len(qbv)]);
  }
}

qfunc ctrl_x<ref: int>(ctrl: qnum, aux: qbit) {
  quantum_if (ctrl == ref) {
    X(aux);
  }
}

qfunc check_msb<ref: int>(x: qbit[], aux: qbit) {
  within {
    invert {
      qft_ns(x);
    }
  } apply {
    ctrl_x<ref>(x[0], aux);
  }
}

qfunc ccmod_add<N: int, a: int>(phi_b: qbit[], c1: qbit, c2: qbit, aux: qbit) {
  ctrl: qbit[];
  {c1, c2} -> ctrl;
  control (ctrl) {
    phase_lad<a>(phi_b);
  }
  invert {
    phase_lad<N>(phi_b);
  }
  check_msb<1>(phi_b, aux);
  control (aux) {
    phase_lad<N>(phi_b);
  }
  within {
    invert {
      control (ctrl) {
        phase_lad<a>(phi_b);
      }
    }
  } apply {
    check_msb<0>(phi_b, aux);
  }
  ctrl -> {c1, c2};
}

qfunc cmod_mult<N: int, a: int>(b: qbit[], x: qbit[], ctrl: qbit, aux: qbit) {
  within {
    qft(b);
  } apply {
    repeat (index: len(x)) {
      ccmod_add<N, (a * (2 ** index)) % N>(b, x[index], ctrl, aux);
    }
  }
}

qfunc multi_swap(x: qbit[], y: qbit[]) {
  repeat (index: min(len(x), len(y))) {
    SWAP(x[index], y[index]);
  }
}

qfunc cmod_mult_pair<N: int, a: int>(x: qbit[], ctrl: qbit, aux: qbit) {
  b: qbit[];
  allocate<len(x) + 1>(b);
  cmod_mult<N, a>(b, x, ctrl, aux);
  control (ctrl) {
    multi_swap(x, b);
  }
  invert {
    cmod_mult<N, mod_inverse(a, N)>(b, x, ctrl, aux);
  }
  free(b);
}

qfunc mod_exp_func<N: int, a: int>(x: qbit[], m: qbit[], aux: qbit) {
  repeat (index: len(m)) {
    cmod_mult_pair<N, (a ** (2 ** index)) % N>(x, m[index], aux);
  }
}

qfunc main(output x: qbit[], output power: qbit[], output aux: qbit) {
  allocate<3>(x);
  allocate<6>(power);
  allocate<1>(aux);
  hadamard_transform(power);
  inplace_prepare_int<1>(x);
  mod_exp_func<6, 5>(x, power, aux);
  invert {
    qft(power);
  }
}
