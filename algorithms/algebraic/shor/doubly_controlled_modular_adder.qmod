qfunc phase_lad_expanded___0(phi_b: qbit[5]) {
  PHASE(1.7671, phi_b[0]);
  PHASE(3.5343, phi_b[1]);
  PHASE(0.7854, phi_b[2]);
  PHASE(1.5708, phi_b[3]);
  PHASE(3.1416, phi_b[4]);
}

qfunc phase_lad_expanded___1(phi_b: qbit[5]) {
  PHASE(2.9452, phi_b[0]);
  PHASE(5.8905, phi_b[1]);
  PHASE(5.4978, phi_b[2]);
  PHASE(4.7124, phi_b[3]);
  PHASE(3.1416, phi_b[4]);
}

qfunc check_msb(ref: int, x: qbit[], aux: qbit) {
  within {
    invert {
      qft_ns(x);
    }
  } apply {
    ctrl_x(ref, x[0], aux);
  }
}

qfunc my_qft_step(qbv: qbit[]) {
  H(qbv[0]);
  repeat (index: qbv.len - 1) {
    CPHASE(pi / (2 ** (index + 1)), qbv[0], qbv[index + 1]);
  }
}

qfunc qft_ns(qbv: qbit[]) {
  repeat (index: qbv.len) {
    my_qft_step(qbv[index:qbv.len]);
  }
}

qfunc ctrl_x(ref: int, ctrl: qnum, aux: qbit) {
  control (ctrl == ref) {
    X(aux);
  }
}

qfunc ccmod_add_expanded___0(phi_b: qbit[5], c1: qbit, c2: qbit) {
  ctrl: qbit[2];
  aux: qbit;
  within {
    allocate(1, aux);
    {c1, c2} -> ctrl;
  } apply {
    control (ctrl) {
      phase_lad_expanded___0(phi_b);
    }
    invert {
      phase_lad_expanded___1(phi_b);
    }
    check_msb(1, phi_b, aux);
    control (aux) {
      phase_lad_expanded___1(phi_b);
    }
    within {
      invert {
        control (ctrl) {
          phase_lad_expanded___0(phi_b);
        }
      }
    } apply {
      check_msb(0, phi_b, aux);
    }
  }
}

qfunc main(output b: qnum<5, False, 0>, output ctrl: qbit[2]) {
  allocate(5, b);
  allocate(2, ctrl);
  b ^= 8;
  X(ctrl[0]);
  X(ctrl[1]);
  within {
    qft(b);
  } apply {
    ccmod_add_expanded___0(b, ctrl[0], ctrl[1]);
  }
}
