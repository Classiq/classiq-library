qfunc arith_func(vars: qbit[4], res: qbit) {
  a: qbit;
  b: qbit;
  c: qbit;
  d: qbit;
  vars -> {a, b, c, d};
  res ^= ((a & b) ^ (c & d)) == 1;
  {a, b, c, d} -> vars;
}

qfunc arith_func_shifted(vars: qbit[4], res: qbit) {
  a: qbit;
  b: qbit;
  c: qbit;
  d: qbit;
  vars -> {a, b, c, d};
  res ^= (((a ^ 1) & b) ^ (c & d)) == 1;
  {a, b, c, d} -> vars;
}

qfunc hidden_shift<oracle: qfunc (arg0: qbit[]), oracle_shifted: qfunc (arg0: qbit[])>(target: qbit[]) {
  hadamard_transform(target);
  oracle_shifted(target);
  hadamard_transform(target);
  oracle(target);
  hadamard_transform(target);
}

qfunc main(output s: qbit[]) {
  allocate<4>(s);
  hidden_shift<lambda(y) {
    phase_oracle<lambda(vars, result) {
      arith_func(vars, result);
    }>(y);
  }, lambda(y) {
    phase_oracle<lambda(vars, result) {
      arith_func_shifted(vars, result);
    }>(y);
  }>(s);
}
