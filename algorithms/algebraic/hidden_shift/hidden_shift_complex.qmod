qfunc hidden_shift(oracle: qfunc (qbit[]), oracle_shifted: qfunc (qbit[]), target: qbit[]) {
  hadamard_transform(target);
  oracle_shifted(target);
  hadamard_transform(target);
  oracle(target);
  hadamard_transform(target);
}

qfunc f_dual_qfunc(s: qbit[], res: qbit) {
  res ^= ((((((((s[0:8][5] & s[8:s.len][0]) ^ (s[0:8][2] & s[8:s.len][1])) ^ (s[0:8][7] & s[8:s.len][2])) ^ (s[0:8][0] & s[8:s.len][3])) ^ (s[0:8][6] & s[8:s.len][4])) ^ (s[0:8][3] & s[8:s.len][5])) ^ (s[0:8][1] & s[8:s.len][6])) ^ (s[0:8][4] & s[8:s.len][7])) ^ (((((((s[0:8][5] & s[0:8][2]) & s[0:8][7]) & s[0:8][0]) & s[0:8][6]) & s[0:8][3]) & s[0:8][1]) & s[0:8][4]);
}

qfunc g_qfunc(s: qbit[], res: qbit) {
  res ^= ((((((((s[0:8][0] & s[8:s.len][3]) ^ ((s[0:8][1] ^ 1) & s[8:s.len][6])) ^ (s[0:8][2] & (s[8:s.len][1] ^ 1))) ^ ((s[0:8][3] ^ 1) & s[8:s.len][5])) ^ (s[0:8][4] & s[8:s.len][7])) ^ (s[0:8][5] & s[8:s.len][0])) ^ (s[0:8][6] & s[8:s.len][4])) ^ (s[0:8][7] & s[8:s.len][2])) ^ (((((((s[8:s.len][0] & (s[8:s.len][1] ^ 1)) & s[8:s.len][2]) & s[8:s.len][3]) & s[8:s.len][4]) & s[8:s.len][5]) & s[8:s.len][6]) & s[8:s.len][7]);
}

qfunc main(output s: qbit[]) {
  allocate(16, s);
  hidden_shift(lambda(y) {
    phase_oracle(f_dual_qfunc, y);
  }, lambda(y) {
    phase_oracle(g_qfunc, y);
  }, s);
}
