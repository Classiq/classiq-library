qfunc f_qfunc(vars: qbit[16], res: qbit) {
  x1: qbit;
  x2: qbit;
  x3: qbit;
  x4: qbit;
  x5: qbit;
  x6: qbit;
  x7: qbit;
  x8: qbit;
  x9: qbit;
  x10: qbit;
  x11: qbit;
  x12: qbit;
  x13: qbit;
  x14: qbit;
  x15: qbit;
  x16: qbit;
  vars -> {x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16};
  res ^= (((((((((x1 & x12) ^ (x2 & x15)) ^ (x3 & x10)) ^ (x4 & x14)) ^ (x5 & x16)) ^ (x6 & x9)) ^ (x7 & x13)) ^ (x8 & x11)) ^ (((((((x9 & x10) & x11) & x12) & x13) & x14) & x15) & x16)) == 1;
  {x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16} -> vars;
}

qfunc g_qfunc(vars: qbit[16], res: qbit) {
  x1: qbit;
  x2: qbit;
  x3: qbit;
  x4: qbit;
  x5: qbit;
  x6: qbit;
  x7: qbit;
  x8: qbit;
  x9: qbit;
  x10: qbit;
  x11: qbit;
  x12: qbit;
  x13: qbit;
  x14: qbit;
  x15: qbit;
  x16: qbit;
  vars -> {x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16};
  res ^= (((((((((x1 & x12) ^ ((x2 ^ 1) & x15)) ^ (x3 & (x10 ^ 1))) ^ ((x4 ^ 1) & x14)) ^ (x5 & x16)) ^ (x6 & x9)) ^ (x7 & x13)) ^ (x8 & x11)) ^ (((((((x9 & (x10 ^ 1)) & x11) & x12) & x13) & x14) & x15) & x16)) == 1;
  {x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16} -> vars;
}

qfunc hidden_shift_no_dual<oracle: qfunc (arg0: qbit[], arg1: qbit), oracle_shifted: qfunc (arg0: qbit[], arg1: qbit)>(target: qbit[], ind: qbit) {
  hadamard_transform(target);
  oracle(target, ind);
  Z(ind);
  oracle_shifted(target, ind);
  hadamard_transform(target);
}

qfunc main(output target: qbit[], output ind: qbit) {
  allocate<16>(target);
  allocate<1>(ind);
  hidden_shift_no_dual<lambda(vars, result) {
    f_qfunc(vars, result);
  }, lambda(vars, result) {
    g_qfunc(vars, result);
  }>(target, ind);
}
