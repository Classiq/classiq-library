qstruct QubitizationState {
  data: qnum<2>;
  block: QubitizationBlock;
}

qstruct QubitizationBlock {
  block_ham: qnum<2>;
  block_exp: qbit[6];
}

qstruct BlockEncodedState {
  data: qnum<2>;
  block: qnum<2>;
}

qperm cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, const x_captured__apply_pauli_term__13: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  X(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  Y(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, const x_captured__apply_pauli_term__13: qbit[2]) {
  Z(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm switch_expanded___0(selector: int, pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  if (selector == 0) {
    cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
  } else {
    if (selector == 1) {
      cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
    } else {
      if (selector == 2) {
        cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
      } else {
        if (selector == 3) {
          cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___0(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 1) {
    switch_expanded___0(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__8: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=0, index=0}
  ], data_captured__lcu_pauli__8);
}

qfunc unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__8: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__8);
}

qperm cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, const x_captured__apply_pauli_term__13: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  X(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  Y(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, const x_captured__apply_pauli_term__13: qbit[2]) {
  Z(x_captured__apply_pauli_term__13[pauli_string_captured__apply_pauli_term__13[i_captured__apply_pauli_term__13].index]);
}

qperm switch_expanded___1(selector: int, pauli_string_captured__apply_pauli_term__13: IndexedPauli[], i_captured__apply_pauli_term__13: int, x_captured__apply_pauli_term__13: qbit[2]) {
  if (selector == 0) {
    cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
  } else {
    if (selector == 1) {
      cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
    } else {
      if (selector == 2) {
        cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
      } else {
        if (selector == 3) {
          cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__13, i_captured__apply_pauli_term__13, x_captured__apply_pauli_term__13);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___1(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 2) {
    switch_expanded___1(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__8: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=1, index=0},
    IndexedPauli {pauli=1, index=1}
  ], data_captured__lcu_pauli__8);
}

qfunc unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__8: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=3, index=0},
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__8);
}

qfunc select_1_lambda___0_0_expanded___0(const _block: qnum<2, False, 0>, data_captured__lcu_pauli__8: qbit[2]) {
  repeat (i: 4) {
    control (_block == i) {
      if (i == 0) {
        unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__8);
      } else {
        if (i == 1) {
          unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__8);
        } else {
          if (i == 2) {
            unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__8);
          } else {
            if (i == 3) {
              unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__8);
            }
          }
        }
      }
    }
  }
}

qfunc prepare_select_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__8: qbit[2]) {
  within {
    inplace_prepare_state([
      0.533333333333,
      0.133333333333,
      0.066666666667,
      0.266666666667
    ], 0, block);
  } apply {
    select_1_lambda___0_0_expanded___0(block, data_captured__lcu_pauli__8);
    if (False) {
    }
  }
}

qfunc lcu_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__8: qbit[2]) {
  prepare_select_expanded___0(block, data_captured__lcu_pauli__8);
}

qfunc lcu_pauli_expanded___0(data: qbit[2], block: qnum<2, False, 0>) {
  lcu_expanded___0(block, data);
}

qfunc be_hamiltonian_expanded___0(state: BlockEncodedState) {
  lcu_pauli_expanded___0(state.data, state.block);
}

@disable_perm_check
@disable_const_checks(packed_vars)
qperm reflect_about_zero_expanded___0(const packed_vars: qbit[2]) {
  msbs: qnum<1, False, 0>;
  lsb: qbit;
  packed_vars -> {msbs, lsb};
  within {
    X(lsb);
    H(lsb);
  } apply {
    control (msbs == 0) {
      X(lsb);
    }
  }
  {msbs, lsb} -> packed_vars;
}

qfunc walk_operator_expanded___0(state: BlockEncodedState) {
  be_hamiltonian_expanded___0(state);
  reflect_about_zero_expanded___0(state.block);
  phase (pi);
}

qfunc u_0_lambda___0_0_expanded___0(state___data_captured__lcu_cheb__1: qnum<2, False, 0>, state___block___block_ham_captured__lcu_cheb__1: qnum<2, False, 0>) {
  walk_operator_expanded___0({state___data_captured__lcu_cheb__1, state___block___block_ham_captured__lcu_cheb__1});
}

qfunc select_powered_unitaries_expanded___0(const block: qbit[6], state___data_captured__lcu_cheb__1: qnum<2, False, 0>, state___block___block_ham_captured__lcu_cheb__1: qnum<2, False, 0>) {
  repeat (i: 6) {
    control (block[i]) {
      power (2 ** i) {
        u_0_lambda___0_0_expanded___0(state___data_captured__lcu_cheb__1, state___block___block_ham_captured__lcu_cheb__1);
      }
    }
  }
}

qfunc select_0_lambda___0_0_expanded___0(const lcu_block: qnum<6, False, 0>, state___data_captured__lcu_cheb__1: qnum<2, False, 0>, state___block___block_ham_captured__lcu_cheb__1: qnum<2, False, 0>) {
  select_powered_unitaries_expanded___0(lcu_block, state___data_captured__lcu_cheb__1, state___block___block_ham_captured__lcu_cheb__1);
}

qperm apply_phase_table_expanded___0(target: qbit[6]) {
  PHASE(-0.932660319034, target[0]);
  CX(target[0], target[1]);
  PHASE(0.147262155637, target[1]);
  CX(target[0], target[1]);
  PHASE(1.227184630309, target[1]);
  CX(target[1], target[2]);
  PHASE(-0.245436926062, target[2]);
  CX(target[0], target[2]);
  PHASE(0.049087385212, target[2]);
  CX(target[1], target[2]);
  PHASE(0.147262155637, target[2]);
  CX(target[0], target[2]);
  PHASE(0.049087385212, target[2]);
  CX(target[2], target[3]);
  PHASE(-0.147262155637, target[3]);
  CX(target[0], target[3]);
  PHASE(-0.049087385212, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.147262155637, target[3]);
  CX(target[0], target[3]);
  PHASE(0.343611696486, target[3]);
  CX(target[2], target[3]);
  PHASE(0.245436926062, target[3]);
  CX(target[0], target[3]);
  PHASE(-0.049087385212, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.343611696486, target[3]);
  CX(target[0], target[3]);
  PHASE(-0.63813600776, target[3]);
  CX(target[3], target[4]);
  PHASE(-0.63813600776, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.343611696486, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.049087385212, target[4]);
  CX(target[0], target[4]);
  PHASE(0.245436926062, target[4]);
  CX(target[2], target[4]);
  PHASE(0.343611696486, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.147262155637, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.049087385212, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.147262155637, target[4]);
  CX(target[3], target[4]);
  PHASE(0.049087385212, target[4]);
  CX(target[0], target[4]);
  PHASE(0.147262155637, target[4]);
  CX(target[1], target[4]);
  PHASE(0.049087385212, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.245436926062, target[4]);
  CX(target[2], target[4]);
  PHASE(-0.343611696486, target[4]);
  CX(target[0], target[4]);
  PHASE(0.147262155637, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.147262155637, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.441786466911, target[4]);
  CX(target[4], target[5]);
  PHASE(-0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(0.343611696486, target[5]);
  CX(target[1], target[5]);
  PHASE(0.049087385212, target[5]);
  CX(target[0], target[5]);
  PHASE(-1.030835089459, target[5]);
  CX(target[2], target[5]);
  PHASE(-0.343611696486, target[5]);
  CX(target[0], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[1], target[5]);
  PHASE(0.049087385212, target[5]);
  CX(target[0], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[3], target[5]);
  PHASE(-0.049087385212, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.147262155637, target[5]);
  CX(target[1], target[5]);
  PHASE(-0.049087385212, target[5]);
  CX(target[0], target[5]);
  PHASE(0.245436926062, target[5]);
  CX(target[2], target[5]);
  PHASE(-0.441786466911, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.147262155637, target[5]);
  CX(target[1], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.343611696486, target[5]);
  CX(target[4], target[5]);
  PHASE(-0.343611696486, target[5]);
  CX(target[0], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[1], target[5]);
  PHASE(-0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.441786466911, target[5]);
  CX(target[2], target[5]);
  PHASE(0.245436926062, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.049087385212, target[5]);
  CX(target[1], target[5]);
  PHASE(-0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.049087385212, target[5]);
  CX(target[3], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(0.049087385212, target[5]);
  CX(target[1], target[5]);
  PHASE(0.147262155637, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.343611696486, target[5]);
  CX(target[2], target[5]);
  PHASE(0.539961237336, target[5]);
  CX(target[0], target[5]);
  PHASE(0.049087385212, target[5]);
  CX(target[1], target[5]);
  PHASE(-0.441786466911, target[5]);
  CX(target[0], target[5]);
  PHASE(-0.932660319034, target[5]);
}

qfunc prepare_select_expanded___1(block: qnum<6, False, 0>, state___data_captured__lcu_cheb__1: qnum<2, False, 0>, state___block___block_ham_captured__lcu_cheb__1: qnum<2, False, 0>) {
  within {
    inplace_prepare_state([
      0.034902945722,
      0.002048959459,
      0.069557532723,
      0.018911391634,
      0.062680663038,
      0.049302016137,
      0.032800653258,
      0.073157036688,
      0.029271983932,
      0.044772082572,
      0.078114255829,
      0.049911863887,
      0.011565103979,
      0.066733833311,
      0.093591239421,
      0.092087663887,
      0.073840876738,
      0.051118884938,
      0.031495007377,
      0.017597494793,
      0.009032556389,
      0.004299611604,
      0.001911909512,
      0.000798813761,
      0.000315086428,
      0.000117801302,
      4.1887215e-05,
      1.4206892e-05,
      4.608067e-06,
      1.432607e-06,
      4.27763e-07,
      1.22896e-07,
      3.4029e-08,
      9.095e-09,
      2.349e-09,
      5.87e-10,
      1.42e-10,
      3.3e-11,
      8e-12,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ], 0, block);
  } apply {
    select_0_lambda___0_0_expanded___0(block, state___data_captured__lcu_cheb__1, state___block___block_ham_captured__lcu_cheb__1);
    if (True) {
      apply_phase_table_expanded___0(block);
    }
  }
}

qfunc lcu_cheb_expanded___0(state: QubitizationState) {
  prepare_select_expanded___1(state.block.block_exp, state.data, state.block.block_ham);
}

qfunc main(output data: qnum<2, False, 0>, output block: qnum<8, False, 0>) {
  state: QubitizationState;
  allocate(10, state);
  inplace_prepare_amplitudes([
    0.327820753326,
    0.360992565118,
    0.693632111283,
    0.530181493278
  ], 0.0, state.data);
  lcu_cheb_expanded___0(state);
  state -> {data, block};
}
