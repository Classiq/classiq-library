qstruct BlockEncodedState {
  data: qnum<2, False, 0>;
  block: qnum<2, False, 0>;
}

qfunc identify_block_expanded___0(state: BlockEncodedState, qubit: qbit) {
  qubit ^= state.block == 0;
}

qfunc projector_controlled_phase_expanded___0(phase: real, qvar: qbit[4], aux: qbit) {
  within {
    identify_block_expanded___0(qvar, aux);
  } apply {
    RZ(phase, aux);
  }
}

qperm cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, const x_captured__apply_pauli_term__10: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  X(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  Y(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, const x_captured__apply_pauli_term__10: qbit[2]) {
  Z(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm switch_expanded___0(selector: int, pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  if (selector == 0) {
    cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
  } else {
    if (selector == 1) {
      cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
    } else {
      if (selector == 2) {
        cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
      } else {
        if (selector == 3) {
          cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___0(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 1) {
    switch_expanded___0(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=0, index=0}
  ], data_captured__lcu_pauli__7);
}

qfunc unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__7);
}

qperm cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, const x_captured__apply_pauli_term__10: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  X(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  Y(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, const x_captured__apply_pauli_term__10: qbit[2]) {
  Z(x_captured__apply_pauli_term__10[pauli_string_captured__apply_pauli_term__10[i_captured__apply_pauli_term__10].index]);
}

qperm switch_expanded___1(selector: int, pauli_string_captured__apply_pauli_term__10: IndexedPauli[], i_captured__apply_pauli_term__10: int, x_captured__apply_pauli_term__10: qbit[2]) {
  if (selector == 0) {
    cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
  } else {
    if (selector == 1) {
      cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
    } else {
      if (selector == 2) {
        cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
      } else {
        if (selector == 3) {
          cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__10, i_captured__apply_pauli_term__10, x_captured__apply_pauli_term__10);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___1(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 2) {
    switch_expanded___1(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_4_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=1, index=0},
    IndexedPauli {pauli=1, index=1}
  ], data_captured__lcu_pauli__7);
}

qfunc unitaries_5_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=3, index=0},
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__7);
}

qfunc apply_phase_table_expanded___0(target: qbit[2]) {
  PHASE(0, target[0]);
  CX(target[0], target[1]);
  PHASE(0, target[1]);
  CX(target[0], target[1]);
  PHASE(0, target[1]);
}

qfunc lcu_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__7: qbit[2]) {
  within {
    inplace_prepare_state([
      0.533333333333,
      0.133333333333,
      0.066666666667,
      0.266666666667
    ], 0, block);
  } apply {
    repeat (i: 4) {
      control (block == i) {
        if (i == 0) {
          unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
        } else {
          if (i == 1) {
            unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
          } else {
            if (i == 2) {
              unitaries_4_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
            } else {
              if (i == 3) {
                unitaries_5_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
              }
            }
          }
        }
      }
    }
    apply_phase_table_expanded___0(block);
  }
}

qfunc lcu_pauli_expanded___0(data: qbit[2], block: qnum<2, False, 0>) {
  lcu_expanded___0(block, data);
}

qfunc block_encode_hamiltonian_expanded___0(state: BlockEncodedState) {
  lcu_pauli_expanded___0(state.data, state.block);
}

qfunc qsvt_step_expanded___0(phase1: real, phase2: real, qvar: qbit[4], aux: qbit) {
  block_encode_hamiltonian_expanded___0(qvar);
  projector_controlled_phase_expanded___0(phase1, qvar, aux);
  invert {
    block_encode_hamiltonian_expanded___0(qvar);
  }
  projector_controlled_phase_expanded___0(phase2, qvar, aux);
}

qfunc qsvt_expanded___0(phase_seq: real[], qvar: qbit[4], aux: qbit) {
  H(aux);
  projector_controlled_phase_expanded___0(phase_seq[0], qvar, aux);
  repeat (index: 6) {
    qsvt_step_expanded___0(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], qvar, aux);
  }
  if (True) {
    IDENTITY(qvar);
  }
  H(aux);
}

qfunc my_qsvt_expanded___0(phases: real[], qsvt_aux: qbit, state: BlockEncodedState) {
  qsvt_expanded___0(phases, state, qsvt_aux);
}

qfunc unitaries_0_lambda___0_0_expanded___0(qsvt_aux_captured__main__0: qbit, state_captured__main__0: BlockEncodedState) {
  my_qsvt_expanded___0([
    4.706742805919,
    3.183364187246,
    2.955372229367,
    3.513111260809,
    3.124815932204,
    2.902468305789,
    2.861184311065,
    2.902468305789,
    3.124815932204,
    3.513111260809,
    2.955372229367,
    3.183364187246,
    (-36.133961690749)
  ], qsvt_aux_captured__main__0, state_captured__main__0);
}

qfunc qsvt_expanded___1(phase_seq: real[], qvar: qbit[4], aux: qbit) {
  H(aux);
  projector_controlled_phase_expanded___0(phase_seq[0], qvar, aux);
  repeat (index: 6) {
    qsvt_step_expanded___0(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], qvar, aux);
  }
  if (False) {
  } else {
    block_encode_hamiltonian_expanded___0(qvar);
    projector_controlled_phase_expanded___0(phase_seq[13], qvar, aux);
  }
  H(aux);
}

qfunc my_qsvt_expanded___1(phases: real[], qsvt_aux: qbit, state: BlockEncodedState) {
  qsvt_expanded___1(phases, state, qsvt_aux);
}

qfunc unitaries_1_lambda___0_0_expanded___0(qsvt_aux_captured__main__0: qbit, state_captured__main__0: BlockEncodedState) {
  my_qsvt_expanded___1([
    4.710572127328,
    3.157751559463,
    3.04636307197,
    3.441942229235,
    2.850010365111,
    2.868880288382,
    2.998128354139,
    2.998128354139,
    2.868880288382,
    2.850010365111,
    3.441942229235,
    3.04636307197,
    3.157751559463,
    (-39.271725022929)
  ], qsvt_aux_captured__main__0, state_captured__main__0);
}

qfunc apply_phase_table_expanded___1(target: qbit[1]) {
  PHASE(1.570796326795, target[0]);
}

qfunc lcu_expanded___1(block: qnum<1, False, 0>, qsvt_aux_captured__main__0: qbit, state_captured__main__0: BlockEncodedState) {
  within {
    inplace_prepare_state([0.5, 0.5], 0, block);
  } apply {
    repeat (i: 2) {
      control (block == i) {
        if (i == 0) {
          unitaries_0_lambda___0_0_expanded___0(qsvt_aux_captured__main__0, state_captured__main__0);
        } else {
          if (i == 1) {
            unitaries_1_lambda___0_0_expanded___0(qsvt_aux_captured__main__0, state_captured__main__0);
          }
        }
      }
    }
    apply_phase_table_expanded___1(block);
  }
}

qfunc main(output data: qnum<2, False, 0>, output block: qnum<4, False, 0>) {
  qsvt_aux: qbit;
  block_exp: qbit;
  state: BlockEncodedState;
  allocate(1, qsvt_aux);
  allocate(1, block_exp);
  allocate(4, state);
  inplace_prepare_amplitudes([
    0.78459331804,
    0.369340327132,
    0.348505181407,
    0.355731902666
  ], 0.0, state.data);
  lcu_expanded___1(block_exp, qsvt_aux, state);
  {state, qsvt_aux, block_exp} -> {data, block};
}
