qstruct QSVTState {
  data: qnum<2>;
  block: QSVTBlock;
}

qstruct QSVTBlock {
  block_ham: qnum<2>;
  block_qsvt: qbit;
  block_lcu: qbit;
}

qstruct BlockEncodedState {
  data: qnum<2>;
  block: qnum<2>;
}

qfunc identify_block_expanded___0(be_state: BlockEncodedState, q: qbit) {
  q ^= be_state.block == 0;
}

qfunc projector_controlled_double_phase_expanded___0(phase_even: real, phase_odd: real, qvar: qbit[4], aux: qbit, const lcu: qbit) {
  within {
    identify_block_expanded___0(qvar, aux);
  } apply {
    control (lcu) {
      RZ(phase_odd, aux);
    } else {
      RZ(phase_even, aux);
    }
  }
}

qperm cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, const x_captured__apply_pauli_term__12: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  X(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  Y(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, const x_captured__apply_pauli_term__12: qbit[2]) {
  Z(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm switch_expanded___0(selector: int, pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  if (selector == 0) {
    cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
  } else {
    if (selector == 1) {
      cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
    } else {
      if (selector == 2) {
        cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
      } else {
        if (selector == 3) {
          cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___0(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 1) {
    switch_expanded___0(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=0, index=0}
  ], data_captured__lcu_pauli__7);
}

qfunc unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__7);
}

qperm cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, const x_captured__apply_pauli_term__12: qbit[2]) {
  IDENTITY(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  X(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  Y(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, const x_captured__apply_pauli_term__12: qbit[2]) {
  Z(x_captured__apply_pauli_term__12[pauli_string_captured__apply_pauli_term__12[i_captured__apply_pauli_term__12].index]);
}

qperm switch_expanded___1(selector: int, pauli_string_captured__apply_pauli_term__12: IndexedPauli[], i_captured__apply_pauli_term__12: int, x_captured__apply_pauli_term__12: qbit[2]) {
  if (selector == 0) {
    cases_4_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
  } else {
    if (selector == 1) {
      cases_5_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
    } else {
      if (selector == 2) {
        cases_6_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
      } else {
        if (selector == 3) {
          cases_7_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__12, i_captured__apply_pauli_term__12, x_captured__apply_pauli_term__12);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___1(pauli_string: IndexedPauli[], x: qbit[2]) {
  repeat (i: 2) {
    switch_expanded___1(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=1, index=0},
    IndexedPauli {pauli=1, index=1}
  ], data_captured__lcu_pauli__7);
}

qfunc unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__7: qbit[2]) {
  apply_pauli_term_expanded___1([
    IndexedPauli {pauli=3, index=0},
    IndexedPauli {pauli=3, index=1}
  ], data_captured__lcu_pauli__7);
}

qfunc select_1_lambda___0_0_expanded___0(const _block: qnum<2, False, 0>, data_captured__lcu_pauli__7: qbit[2]) {
  repeat (i: 4) {
    control (_block == i) {
      if (i == 0) {
        unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
      } else {
        if (i == 1) {
          unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
        } else {
          if (i == 2) {
            unitaries_2_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
          } else {
            if (i == 3) {
              unitaries_3_lambda___0_0_expanded___0(data_captured__lcu_pauli__7);
            }
          }
        }
      }
    }
  }
}

qfunc prepare_select_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__7: qbit[2]) {
  within {
    inplace_prepare_state([
      0.533333333333,
      0.133333333333,
      0.066666666667,
      0.266666666667
    ], 0, block);
  } apply {
    select_1_lambda___0_0_expanded___0(block, data_captured__lcu_pauli__7);
    if (False) {
    }
  }
}

qfunc lcu_expanded___0(block: qnum<2, False, 0>, data_captured__lcu_pauli__7: qbit[2]) {
  prepare_select_expanded___0(block, data_captured__lcu_pauli__7);
}

qfunc lcu_pauli_expanded___0(data: qbit[2], block: qnum<2, False, 0>) {
  lcu_expanded___0(block, data);
}

qfunc be_hamiltonian_expanded___0(state: BlockEncodedState) {
  lcu_pauli_expanded___0(state.data, state.block);
}

qfunc qsvt_lcu_step_expanded___0(phases_even: real[], phases_odd: real[], qvar: qbit[4], aux: qbit, const lcu: qbit) {
  be_hamiltonian_expanded___0(qvar);
  projector_controlled_double_phase_expanded___0(phases_even[0], phases_odd[0], qvar, aux, lcu);
  invert {
    be_hamiltonian_expanded___0(qvar);
  }
  projector_controlled_double_phase_expanded___0(phases_even[1], phases_odd[1], qvar, aux, lcu);
}

qfunc projector_controlled_phase_expanded___0(phase: real, qvar: qbit[4], aux: qbit) {
  within {
    identify_block_expanded___0(qvar, aux);
  } apply {
    RZ(phase, aux);
  }
}

qfunc qsvt_lcu_expanded___0(phase_seq_even: real[], phase_seq_odd: real[], qvar: qbit[4], aux: qbit, const lcu: qbit) {
  H(aux);
  projector_controlled_double_phase_expanded___0(phase_seq_even[0], phase_seq_odd[0], qvar, aux, lcu);
  repeat (index: 18) {
    qsvt_lcu_step_expanded___0(phase_seq_even[((2 * index) + 1):((2 * index) + 3)], phase_seq_odd[((2 * index) + 1):((2 * index) + 3)], qvar, aux, lcu);
  }
  if (False) {
  }
  if (True) {
    be_hamiltonian_expanded___0(qvar);
    projector_controlled_double_phase_expanded___0(phase_seq_even[37], phase_seq_odd[37], qvar, aux, lcu);
    control (lcu == 0) {
      invert {
        be_hamiltonian_expanded___0(qvar);
      }
      projector_controlled_phase_expanded___0(phase_seq_even[38], qvar, aux);
    }
  }
  H(aux);
}

qfunc select_0_lambda___0_0_expanded___0(const block_lcu: qnum<1, False, 0>, state___data_captured__qsvt_hamiltonian_evolution__1: qnum<2, False, 0>, state___block___block_ham_captured__qsvt_hamiltonian_evolution__1: qnum<2, False, 0>, state___block___block_qsvt_captured__qsvt_hamiltonian_evolution__1: qbit) {
  qsvt_lcu_expanded___0([
    3.141592653668,
    3.141592652137,
    3.141592677575,
    3.141592306407,
    3.141597014075,
    3.141545731515,
    3.142018582544,
    3.138394525074,
    3.160950177895,
    3.050529244684,
    3.454368222386,
    2.457255049327,
    3.851510392038,
    3.268680561867,
    2.525817432105,
    2.71382544809,
    3.219231701708,
    3.570415224923,
    3.736345569116,
    3.782280997676,
    3.736345569116,
    3.570415224923,
    3.219231701708,
    2.71382544809,
    2.525817432105,
    3.268680561867,
    3.851510392038,
    2.457255049327,
    3.454368222386,
    3.050529244684,
    3.160950177895,
    3.138394525074,
    3.142018582544,
    3.141545731515,
    3.141597014075,
    3.141592306407,
    3.141592677575,
    3.141592652137,
    (-116.238928182744)
  ], [
    3.14159265329,
    3.14159265891,
    3.14159257114,
    3.141593769287,
    3.141579625934,
    3.141722120075,
    3.140516214587,
    3.148918289472,
    3.101972436682,
    3.304513947445,
    2.673992316503,
    3.919635960722,
    2.697782717437,
    2.644939949614,
    3.423884763503,
    3.726338658069,
    3.52811285625,
    3.237660540027,
    3.074272775392,
    3.074272775392,
    3.237660540027,
    3.52811285625,
    3.726338658069,
    3.423884763503,
    2.644939949614,
    2.697782717437,
    3.919635960722,
    2.673992316503,
    3.304513947445,
    3.101972436682,
    3.148918289472,
    3.140516214587,
    3.141722120075,
    3.141579625934,
    3.141593769287,
    3.14159257114,
    3.14159265891,
    (-113.097335529533)
  ], {state___data_captured__qsvt_hamiltonian_evolution__1, state___block___block_ham_captured__qsvt_hamiltonian_evolution__1}, state___block___block_qsvt_captured__qsvt_hamiltonian_evolution__1, block_lcu);
}

qperm apply_phase_table_expanded___0(target: qbit[1]) {
  PHASE(-1.570796326795, target[0]);
}

qfunc prepare_select_expanded___1(block: qnum<1, False, 0>, state___data_captured__qsvt_hamiltonian_evolution__1: qnum<2, False, 0>, state___block___block_ham_captured__qsvt_hamiltonian_evolution__1: qnum<2, False, 0>, state___block___block_qsvt_captured__qsvt_hamiltonian_evolution__1: qbit) {
  within {
    inplace_prepare_state([0.5, 0.5], 0, block);
  } apply {
    select_0_lambda___0_0_expanded___0(block, state___data_captured__qsvt_hamiltonian_evolution__1, state___block___block_ham_captured__qsvt_hamiltonian_evolution__1, state___block___block_qsvt_captured__qsvt_hamiltonian_evolution__1);
    if (True) {
      apply_phase_table_expanded___0(block);
    }
  }
}

qfunc qsvt_hamiltonian_evolution_expanded___0(state: QSVTState) {
  prepare_select_expanded___1(state.block.block_lcu, state.data, state.block.block_ham, state.block.block_qsvt);
}

qfunc main(output data: qnum<2, False, 0>, output block: qnum<4, False, 0>) {
  state: QSVTState;
  allocate(6, state);
  inplace_prepare_amplitudes([
    0.327820753326,
    0.360992565118,
    0.693632111283,
    0.530181493278
  ], 0.0, state.data);
  qsvt_hamiltonian_evolution_expanded___0(state);
  state -> {data, block};
}
