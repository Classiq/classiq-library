qfunc cut_oracle(cut_size: int, const nodes: qbit[], permutable res: qbit) {
  res ^= cut_size <= ((((((0 + ((nodes[0] * (1 - nodes[1])) + (nodes[1] * (1 - nodes[0])))) + ((nodes[0] * (1 - nodes[2])) + (nodes[2] * (1 - nodes[0])))) + ((nodes[1] * (1 - nodes[2])) + (nodes[2] * (1 - nodes[1])))) + ((nodes[1] * (1 - nodes[3])) + (nodes[3] * (1 - nodes[1])))) + ((nodes[2] * (1 - nodes[4])) + (nodes[4] * (1 - nodes[2])))) + ((nodes[3] * (1 - nodes[4])) + (nodes[4] * (1 - nodes[3]))));
}

qfunc main(r: int, output nodes: qbit[5]) {
  allocate(nodes);
  hadamard_transform(nodes);
  power (r) {
    grover_operator(lambda(vars) {
      phase_oracle(lambda(vars, res) {
        cut_oracle(4, vars, res);
      }, vars);
    }, hadamard_transform, nodes);
  }
}
