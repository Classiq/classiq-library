qfunc apply_pauli_term(pauli_string: Pauli[], x: qbit[]) {
  repeat (index: x.len) {
    switch(pauli_string[index], [lambda() {
      IDENTITY(x[(pauli_string.len - index) - 1]);
    }, lambda() {
      X(x[(pauli_string.len - index) - 1]);
    }, lambda() {
      Y(x[(pauli_string.len - index) - 1]);
    }, lambda() {
      Z(x[(pauli_string.len - index) - 1]);
    }]);
  }
}

qfunc block_encode(pauli_list: Pauli[][], data: qbit[], block: qnum) {
  within {
    hadamard_transform(block);
  } apply {
    repeat (i: pauli_list.len) {
      control (block == i) {
        apply_pauli_term(pauli_list[i], data);
      }
    }
  }
}

qfunc check_block(b: qnum, res: qbit) {
  res ^= b == 0;
}

qfunc oblivious_amplitude_amplification(reps: int, block_encoding: qfunc (qnum, qbit[]), block: qnum, data: qbit[]) {
  block_encoding(data, block);
  repeat (index: reps) {
    grover_operator(lambda(b) {
      phase_oracle(lambda(x, res) {
        check_block(x, res);
      }, b);
    }, lambda(b) {
      block_encoding(data, b);
    }, block);
  }
}

qfunc main(output data: qnum, output block: qnum) {
  allocate(2, block);
  prepare_amplitudes([
    0.4709243714124557,
    0.8134303596981152,
    0.0001291583857834318,
    0.3414107052353368
  ], 0, data);
  oblivious_amplitude_amplification(1, lambda(_block, _data) {
    block_encode([
      [Pauli::Z, Pauli::X],
      [Pauli::X, Pauli::Z],
      [Pauli::X, Pauli::X],
      [Pauli::Z, Pauli::Z]
    ], _block, _data);
  }, block, data);
}
