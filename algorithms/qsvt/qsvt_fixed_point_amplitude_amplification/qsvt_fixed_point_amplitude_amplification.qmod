qfunc arith_equation(a: qnum, b: qnum, c: qnum, res: qbit) {
  res ^= ((a + b) == 3) and ((c - a) == 2);
}

qfunc my_qsvt_step(phase1: real, phase2: real, proj_ctrl_phase_1: qfunc (real, qbit[], qbit), proj_ctrl_phase_2: qfunc (real, qbit[], qbit), u: qfunc (qbit[]), state: qbit[], aux: qbit) {
  u(state);
  proj_ctrl_phase_2(phase1, state, aux);
  invert {
    u(state);
  }
  proj_ctrl_phase_1(phase2, state, aux);
}

qfunc my_qsvt(phase_seq: real[], proj_ctrl_phase_1: qfunc (real, qbit[], qbit), proj_ctrl_phase_2: qfunc (real, qbit[], qbit), u: qfunc (qbit[]), state: qbit[], aux: qbit) {
  H(aux);
  proj_ctrl_phase_1(phase_seq[0], state, aux);
  repeat (index: floor((phase_seq.len - 1) / 2)) {
    my_qsvt_step(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], proj_ctrl_phase_1, proj_ctrl_phase_2, u, state, aux);
  }
  if ((phase_seq.len % 2) == 1) {
    IDENTITY(state);
  } else {
    u(state);
    proj_ctrl_phase_2(phase_seq[phase_seq.len - 1], state, aux);
  }
  H(aux);
}

qfunc qsvt_fpaa(phase_seq: real[], arith_oracle: qfunc (qbit[], qbit), state: qbit[], output aux: qbit) {
  allocate(1, aux);
  my_qsvt(phase_seq, lambda(phase, state, aux) {
    hadamard_transform(state);
    apply_to_all(X, state);
    control (state) {
      X(aux);
    }
    RZ(phase, aux);
    control (state) {
      X(aux);
    }
    apply_to_all(X, state);
    hadamard_transform(state);
  }, lambda(phase, state, aux) {
    arith_oracle(state, aux);
    RZ(phase, aux);
    arith_oracle(state, aux);
  }, lambda(state) {
    IDENTITY(state);
  }, state, aux);
}

qfunc main(output state: qbit[], output aux: qbit) {
  allocate(6, state);
  hadamard_transform(state);
  qsvt_fpaa([
    3.7966,
    4.059,
    4.3526,
    1.9162,
    2.8594,
    (-1.0825),
    3.6073,
    3.1312,
    6.962,
    2.5015,
    2.4699,
    1.6874,
    4.1289,
    4.1289,
    1.6874,
    2.4699,
    2.5015,
    6.962,
    3.1312,
    3.6073,
    (-1.0825),
    2.8594,
    8.1994,
    (-1.9306),
    4.059,
    (-77.8849)
  ], lambda(state_reg, aux_reg) {
    arith_equation(state_reg[0:2], state_reg[2:3], state_reg[3:6], aux_reg);
  }, state, aux);
}
