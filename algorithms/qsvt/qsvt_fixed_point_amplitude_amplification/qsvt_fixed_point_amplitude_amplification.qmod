qstruct OracleVars {
  a: qnum<2, False, 0>;
  b: qnum<1, False, 0>;
  c: qnum<3, False, 0>;
}

qfunc my_qsvt_step(phase1: real, phase2: real, proj_ctrl_phase_1: qfunc (real, qbit[], qbit), proj_ctrl_phase_2: qfunc (real, qbit[], qbit), u: qfunc (qbit[]), state: qbit[], aux: qbit) {
  u(state);
  proj_ctrl_phase_2(phase1, state, aux);
  invert {
    u(state);
  }
  proj_ctrl_phase_1(phase2, state, aux);
}

qfunc my_qsvt(phase_seq: real[], proj_ctrl_phase_1: qfunc (real, qbit[], qbit), proj_ctrl_phase_2: qfunc (real, qbit[], qbit), u: qfunc (qbit[]), state: qbit[], aux: qbit) {
  H(aux);
  proj_ctrl_phase_1(phase_seq[0], state, aux);
  repeat (index: floor((phase_seq.len - 1) / 2)) {
    my_qsvt_step(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], proj_ctrl_phase_1, proj_ctrl_phase_2, u, state, aux);
  }
  if ((phase_seq.len % 2) == 1) {
    IDENTITY(state);
  } else {
    u(state);
    proj_ctrl_phase_2(phase_seq[phase_seq.len - 1], state, aux);
  }
  H(aux);
}

qfunc initial_state_rot(phase: real, state: qnum, aux: qbit) {
  within {
    hadamard_transform(state);
    aux ^= state == 0;
  } apply {
    RZ(phase, aux);
  }
}

qfunc target_state_rot(phase: real, arith_oracle: qfunc (qbit[], qbit), state: qbit[], aux: qbit) {
  within {
    arith_oracle(state, aux);
  } apply {
    RZ(phase, aux);
  }
}

qfunc qsvt_fpaa(phase_seq: real[], arith_oracle: qfunc (qbit[], qbit), state: qbit[], output aux: qbit) {
  allocate(1, aux);
  my_qsvt(phase_seq, lambda(phase, state, aux) {
    initial_state_rot(phase, state, aux);
  }, lambda(phase, state, aux) {
    target_state_rot(phase, arith_oracle, state, aux);
  }, lambda(state) {
    IDENTITY(state);
  }, state, aux);
}

qfunc arith_equation(state: OracleVars, res: qbit) {
  res ^= ((state.a + state.b) == 3) and ((state.c - state.a) == 2);
}

qfunc main(output state: OracleVars, output aux: qbit) {
  allocate(state.size, state);
  hadamard_transform(state);
  qsvt_fpaa([
    4.6918,
    3.1678,
    3.1078,
    3.1853,
    3.0848,
    3.2155,
    3.045,
    3.2686,
    2.9717,
    3.3761,
    2.7966,
    3.7267,
    1.654,
    1.654,
    3.7267,
    2.7966,
    3.3761,
    2.9717,
    3.2686,
    3.045,
    3.2155,
    3.0848,
    3.1853,
    3.1078,
    3.1678,
    (-76.9896)
  ], arith_equation, state, aux);
}
