qfunc unitary_with_power_logic<pw: int, matrix: real[][]>(target: qbit[]) {
  power (pw) {
    unitary<matrix>(target);
  }
}

qfunc suzuki_trotter1_with_power_logic<hamiltonian: PauliTerm[], pw: int, r0: int, reps_scaling_factor: real, evolution_coefficient: real>(target: qbit[]) {
  suzuki_trotter<hamiltonian, evolution_coefficient * pw, 1, r0 * ceiling(reps_scaling_factor ** log(pw, 2))>(target);
}

qfunc my_qpe_flexible<unitary_with_power: qfunc <arg0: int>(arg1: qbit[]), precision: int>(state: qbit[], output phase: qbit[precision]) {
  allocate<precision>(phase);
  apply_to_all<H>(phase);
  repeat (index: precision) {
    control (phase[index]) {
      unitary_with_power<2 ** index>(state);
    }
  }
  invert {
    qft(phase);
  }
}

qfunc main(output phase_result: qnum<8, False, 8>) {
  state: qbit[];
  prepare_amplitudes<[
    0.55653745541481,
    0.17653302146188,
    0.629197193488002,
    0.513042926820719
  ], 0.0>(state);
  phase_array: qbit[];
  my_qpe_flexible<lambda<pw>(arg1) {
    if (True) {
      unitary_with_power_logic<pw, [
        [
          ((-0.800994193328528) - 0.432184369481798j),
          (0.18481604491471 - 0.230641913600945j),
          (0.182066604712991 - 0.208198484698175j),
          (0.010207121446984 - 0.087597188034849j)
        ],
        [
          (0.18481604491471 - 0.230641913600945j),
          ((-0.74259258995001) - 0.478111274957735j),
          (0.212289111070001 - 0.243461671831465j),
          ((-0.07305797727484) + 0.151444613535273j)
        ],
        [
          (0.18206660471299 - 0.208198484698175j),
          (0.212289111070001 - 0.243461671831465j),
          ((-0.763886162414103) - 0.484576516522355j),
          ((-0.026023894036146) + 0.012295427374176j)
        ],
        [
          (0.010207121446984 - 0.087597188034849j),
          ((-0.073057977274841) + 0.151444613535273j),
          ((-0.026023894036146) + 0.012295427374176j),
          ((-0.895413431349899) - 0.401691392328609j)
        ]
      ]>(arg1);
    } else {
      suzuki_trotter1_with_power_logic<[
        PauliTerm {
          pauli = [Pauli::I, Pauli::I],
          coefficient = 0.4
        },
        PauliTerm {
          pauli = [Pauli::I, Pauli::Z],
          coefficient = 0.01504032
        },
        PauliTerm {
          pauli = [Pauli::I, Pauli::X],
          coefficient = 0.10676978
        },
        PauliTerm {
          pauli = [Pauli::Z, Pauli::I],
          coefficient = 0.016634415
        },
        PauliTerm {
          pauli = [Pauli::Z, Pauli::Z],
          coefficient = -0.042759185
        },
        PauliTerm {
          pauli = [Pauli::Z, Pauli::X],
          coefficient = 0.12638833
        },
        PauliTerm {
          pauli = [Pauli::X, Pauli::I],
          coefficient = 0.042057265
        },
        PauliTerm {
          pauli = [Pauli::X, Pauli::Z],
          coefficient = 0.172936455
        },
        PauliTerm {
          pauli = [Pauli::X, Pauli::X],
          coefficient = 0.15658719
        },
        PauliTerm {
          pauli = [Pauli::Y, Pauli::Y],
          coefficient = 0.09539162
        }
      ], pw, 2, 1.8, -6.283185307179586>(arg1);
    }
  }, 8>(state, phase_array);
  phase_array -> phase_result;
}
