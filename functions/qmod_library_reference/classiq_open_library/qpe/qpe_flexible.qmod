qfunc main(output state: qbit[], output phase: qnum) {
  allocate<2>(state);
  allocate_num<2, False, 2>(phase);
  hadamard_transform(state);
  qpe_flexible<lambda<power>() {
    suzuki_trotter<[
      PauliTerm {
<<<<<<< HEAD
<<<<<<< HEAD
        pauli = [Pauli::I, Pauli::Z],
        coefficient = -0.125
      },
      PauliTerm {
        pauli = [Pauli::Z, Pauli::I],
        coefficient = -0.25
      },
      PauliTerm {
        pauli = [Pauli::I, Pauli::I],
        coefficient = 0.375
=======
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
        pauli=[Pauli::I, Pauli::Z],
        coefficient=-0.125
      },
      PauliTerm {
        pauli=[Pauli::Z, Pauli::I],
        coefficient=-0.25
      },
      PauliTerm {
        pauli=[Pauli::I, Pauli::I],
        coefficient=0.375
<<<<<<< HEAD
>>>>>>> 991980ef0472d4a1f0e4f3caa0a1c1046ab9fbeb
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
      }
    ], ((-2) * pi) * power, 1, 1>(state);
  }>(phase);
}
