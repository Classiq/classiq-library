qstruct QSVTState {
  state: qnum<4>;
  ref: qnum<4>;
  ind: qbit;
}

qfunc projector_cnot1(const qsvt_state: QSVTState, permutable aux: qbit) {
  aux ^= (qsvt_state.ref == 0) and (qsvt_state.ind == 0);
}

qfunc projector_cnot2(const qsvt_state: QSVTState, permutable aux: qbit) {
  aux ^= qsvt_state.ind == 0;
}

qfunc u_sqrt(qsvt_state: QSVTState) {
  hadamard_transform(qsvt_state.ref);
  qsvt_state.ind ^= qsvt_state.state <= qsvt_state.ref;
}

qfunc qsvt_sqrt_polynomial(qsvt_phases: real[], qsvt_state: QSVTState, qsvt_aux: qbit) {
  qsvt(qsvt_phases, projector_cnot1, projector_cnot2, u_sqrt, qsvt_state, qsvt_aux);
}

qfunc main(output state: qnum<4>, output ref: qnum<4>, output ind: qbit, output qsvt_aux: qbit) {
  qsvt_state: QSVTState;
  allocate(qsvt_state);
  allocate(qsvt_aux);
  hadamard_transform(qsvt_state.state);
  qsvt_sqrt_polynomial([
    5.5521,
    3.6212,
    2.4498,
    2.4498,
    3.6212,
    (-13.2975)
  ], qsvt_state, qsvt_aux);
  qsvt_state -> {state, ref, ind};
}
