qfunc projector_cnot(reg: qnum, aux: qbit) {
  aux ^= reg == 0;
}

qfunc u_sqrt(a: qnum, ref: qnum, res: qbit) {
  hadamard_transform(ref);
  res ^= a <= ref;
}

qfunc qsvt_sqrt_polynomial(qsvt_phases: real[], state: qnum, ref: qnum, ind: qbit, qsvt_aux: qbit) {
  result: qbit[];
  within {
    {ind, ref, state} -> result;
  } apply {
    qsvt(qsvt_phases, lambda(reg_, aux_) {
      projector_cnot(reg_[0:5], aux_);
    }, lambda(reg_, aux_) {
      projector_cnot(reg_[0], aux_);
    }, lambda(reg_) {
      u_sqrt(reg_[5:reg_.len], reg_[1:5], reg_[0]);
    }, result, qsvt_aux);
  }
}

qfunc main(output state: qnum, output ref: qnum, output ind: qbit, output qsvt_aux: qbit) {
  allocate(4, state);
  allocate(4, ref);
  allocate(1, ind);
  allocate(1, qsvt_aux);
  hadamard_transform(state);
  qsvt_sqrt_polynomial([
    5.5521,
    3.6212,
    2.4498,
    2.4498,
    3.6212,
    (-13.2975)
  ], state, ref, ind, qsvt_aux);
}
