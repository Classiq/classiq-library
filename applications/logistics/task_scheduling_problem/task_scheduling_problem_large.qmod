{
  "functions": [
    {
      "name": "main",
      "param_decls": {
        "params_list": {
          "kind": "array",
          "element_type": {
            "kind": "real"
          },
          "size": 16
        }
      },
      "body": [
        {
          "function": "qaoa_penalty",
          "params": {
            "hamiltonian": {
              "expr": "optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 20.0)"
            },
            "params_list": {
              "expr": "params_list"
            },
            "num_qubits": {
              "expr": "len(get_field(optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 20.0)[0], 'pauli'))"
            },
            "is_st": {
              "expr": "True"
            }
          }
        }
      ]
    }
  ],
  "types": [
    {
      "name": "MyCombiProblem",
      "variables": {
        "x0_0": {
          "kind": "int"
        },
        "x0_1": {
          "kind": "int"
        },
        "x0_2": {
          "kind": "int"
        },
        "x0_3": {
          "kind": "int"
        },
        "x0_4": {
          "kind": "int"
        },
        "x0_5": {
          "kind": "int"
        },
        "x1_0": {
          "kind": "int"
        },
        "x1_1": {
          "kind": "int"
        },
        "x1_2": {
          "kind": "int"
        },
        "x1_3": {
          "kind": "int"
        },
        "x1_4": {
          "kind": "int"
        },
        "x1_5": {
          "kind": "int"
        },
        "x2_0": {
          "kind": "int"
        },
        "x2_1": {
          "kind": "int"
        },
        "x2_2": {
          "kind": "int"
        },
        "x2_3": {
          "kind": "int"
        },
        "x2_4": {
          "kind": "int"
        },
        "x2_5": {
          "kind": "int"
        },
        "x3_0": {
          "kind": "int"
        },
        "x3_1": {
          "kind": "int"
        },
        "x3_2": {
          "kind": "int"
        },
        "x3_3": {
          "kind": "int"
        },
        "x3_4": {
          "kind": "int"
        },
        "x3_5": {
          "kind": "int"
        },
        "x4_0": {
          "kind": "int"
        },
        "x4_1": {
          "kind": "int"
        },
        "x4_2": {
          "kind": "int"
        },
        "x4_3": {
          "kind": "int"
        },
        "x4_4": {
          "kind": "int"
        },
        "x4_5": {
          "kind": "int"
        }
      },
      "constraints": [
        {
          "expr": "Eq(x0_0 + x1_0 + x2_0 + x3_0 + x4_0, 1)"
        },
        {
          "expr": "Eq(x0_1 + x1_1 + x2_1 + x3_1 + x4_1, 1)"
        },
        {
          "expr": "Eq(x0_2 + x1_2 + x2_2 + x3_2 + x4_2, 1)"
        },
        {
          "expr": "Eq(x0_3 + x1_3 + x2_3 + x3_3 + x4_3, 1)"
        },
        {
          "expr": "Eq(x0_4 + x1_4 + x2_4 + x3_4 + x4_4, 1)"
        },
        {
          "expr": "Eq(x0_5 + x1_5 + x2_5 + x3_5 + x4_5, 1)"
        },
        {
          "expr": "x0_0 + 3*x0_1 + 2*x0_2 + 2*x0_3 + x0_4 + x0_5 <= 1"
        },
        {
          "expr": "x1_0 + 3*x1_1 + 2*x1_2 + 2*x1_3 + x1_4 + x1_5 <= 3"
        },
        {
          "expr": "x2_0 + 3*x2_1 + 2*x2_2 + 2*x2_3 + x2_4 + x2_5 <= 4"
        },
        {
          "expr": "x3_0 + 3*x3_1 + 2*x3_2 + 2*x3_3 + x3_4 + x3_5 <= 3"
        },
        {
          "expr": "x4_0 + 3*x4_1 + 2*x4_2 + 2*x4_3 + x4_4 + x4_5 <= 1"
        },
        {
          "expr": "Eq(x0_0*x0_1, 0)"
        },
        {
          "expr": "Eq(x0_1*x1_0, 0)"
        },
        {
          "expr": "Eq(x1_0*x1_1, 0)"
        },
        {
          "expr": "Eq(x0_1*x2_0, 0)"
        },
        {
          "expr": "Eq(x1_1*x2_0, 0)"
        },
        {
          "expr": "Eq(x2_0*x2_1, 0)"
        },
        {
          "expr": "Eq(x0_1*x3_0, 0)"
        },
        {
          "expr": "Eq(x1_1*x3_0, 0)"
        },
        {
          "expr": "Eq(x2_1*x3_0, 0)"
        },
        {
          "expr": "Eq(x3_0*x3_1, 0)"
        },
        {
          "expr": "Eq(x0_1*x4_0, 0)"
        },
        {
          "expr": "Eq(x1_1*x4_0, 0)"
        },
        {
          "expr": "Eq(x2_1*x4_0, 0)"
        },
        {
          "expr": "Eq(x3_1*x4_0, 0)"
        },
        {
          "expr": "Eq(x4_0*x4_1, 0)"
        },
        {
          "expr": "Eq(x0_0*x0_2, 0)"
        },
        {
          "expr": "Eq(x0_2*x1_0, 0)"
        },
        {
          "expr": "Eq(x1_0*x1_2, 0)"
        },
        {
          "expr": "Eq(x0_2*x2_0, 0)"
        },
        {
          "expr": "Eq(x1_2*x2_0, 0)"
        },
        {
          "expr": "Eq(x2_0*x2_2, 0)"
        },
        {
          "expr": "Eq(x0_2*x3_0, 0)"
        },
        {
          "expr": "Eq(x1_2*x3_0, 0)"
        },
        {
          "expr": "Eq(x2_2*x3_0, 0)"
        },
        {
          "expr": "Eq(x3_0*x3_2, 0)"
        },
        {
          "expr": "Eq(x0_2*x4_0, 0)"
        },
        {
          "expr": "Eq(x1_2*x4_0, 0)"
        },
        {
          "expr": "Eq(x2_2*x4_0, 0)"
        },
        {
          "expr": "Eq(x3_2*x4_0, 0)"
        },
        {
          "expr": "Eq(x4_0*x4_2, 0)"
        },
        {
          "expr": "Eq(x0_0*x0_3, 0)"
        },
        {
          "expr": "Eq(x0_3*x1_0, 0)"
        },
        {
          "expr": "Eq(x1_0*x1_3, 0)"
        },
        {
          "expr": "Eq(x0_3*x2_0, 0)"
        },
        {
          "expr": "Eq(x1_3*x2_0, 0)"
        },
        {
          "expr": "Eq(x2_0*x2_3, 0)"
        },
        {
          "expr": "Eq(x0_3*x3_0, 0)"
        },
        {
          "expr": "Eq(x1_3*x3_0, 0)"
        },
        {
          "expr": "Eq(x2_3*x3_0, 0)"
        },
        {
          "expr": "Eq(x3_0*x3_3, 0)"
        },
        {
          "expr": "Eq(x0_3*x4_0, 0)"
        },
        {
          "expr": "Eq(x1_3*x4_0, 0)"
        },
        {
          "expr": "Eq(x2_3*x4_0, 0)"
        },
        {
          "expr": "Eq(x3_3*x4_0, 0)"
        },
        {
          "expr": "Eq(x4_0*x4_3, 0)"
        },
        {
          "expr": "Eq(x0_1*x0_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x1_1, 0)"
        },
        {
          "expr": "Eq(x1_1*x1_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x2_1, 0)"
        },
        {
          "expr": "Eq(x1_5*x2_1, 0)"
        },
        {
          "expr": "Eq(x2_1*x2_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x3_1, 0)"
        },
        {
          "expr": "Eq(x1_5*x3_1, 0)"
        },
        {
          "expr": "Eq(x2_5*x3_1, 0)"
        },
        {
          "expr": "Eq(x3_1*x3_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x4_1, 0)"
        },
        {
          "expr": "Eq(x1_5*x4_1, 0)"
        },
        {
          "expr": "Eq(x2_5*x4_1, 0)"
        },
        {
          "expr": "Eq(x3_5*x4_1, 0)"
        },
        {
          "expr": "Eq(x4_1*x4_5, 0)"
        },
        {
          "expr": "Eq(x0_2*x0_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x1_2, 0)"
        },
        {
          "expr": "Eq(x1_2*x1_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x2_2, 0)"
        },
        {
          "expr": "Eq(x1_4*x2_2, 0)"
        },
        {
          "expr": "Eq(x2_2*x2_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x3_2, 0)"
        },
        {
          "expr": "Eq(x1_4*x3_2, 0)"
        },
        {
          "expr": "Eq(x2_4*x3_2, 0)"
        },
        {
          "expr": "Eq(x3_2*x3_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x4_2, 0)"
        },
        {
          "expr": "Eq(x1_4*x4_2, 0)"
        },
        {
          "expr": "Eq(x2_4*x4_2, 0)"
        },
        {
          "expr": "Eq(x3_4*x4_2, 0)"
        },
        {
          "expr": "Eq(x4_2*x4_4, 0)"
        },
        {
          "expr": "Eq(x0_3*x0_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x1_3, 0)"
        },
        {
          "expr": "Eq(x1_3*x1_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x2_3, 0)"
        },
        {
          "expr": "Eq(x1_4*x2_3, 0)"
        },
        {
          "expr": "Eq(x2_3*x2_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x3_3, 0)"
        },
        {
          "expr": "Eq(x1_4*x3_3, 0)"
        },
        {
          "expr": "Eq(x2_4*x3_3, 0)"
        },
        {
          "expr": "Eq(x3_3*x3_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x4_3, 0)"
        },
        {
          "expr": "Eq(x1_4*x4_3, 0)"
        },
        {
          "expr": "Eq(x2_4*x4_3, 0)"
        },
        {
          "expr": "Eq(x3_4*x4_3, 0)"
        },
        {
          "expr": "Eq(x4_3*x4_4, 0)"
        },
        {
          "expr": "Eq(x0_4*x0_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x1_4, 0)"
        },
        {
          "expr": "Eq(x1_4*x1_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x2_4, 0)"
        },
        {
          "expr": "Eq(x1_5*x2_4, 0)"
        },
        {
          "expr": "Eq(x2_4*x2_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x3_4, 0)"
        },
        {
          "expr": "Eq(x1_5*x3_4, 0)"
        },
        {
          "expr": "Eq(x2_5*x3_4, 0)"
        },
        {
          "expr": "Eq(x3_4*x3_5, 0)"
        },
        {
          "expr": "Eq(x0_5*x4_4, 0)"
        },
        {
          "expr": "Eq(x1_5*x4_4, 0)"
        },
        {
          "expr": "Eq(x2_5*x4_4, 0)"
        },
        {
          "expr": "Eq(x3_5*x4_4, 0)"
        },
        {
          "expr": "Eq(x4_4*x4_5, 0)"
        },
        {
          "expr": "Eq(x3_0, 0)"
        },
        {
          "expr": "Eq(x4_0, 0)"
        },
        {
          "expr": "Eq(x0_1, 0)"
        },
        {
          "expr": "Eq(x4_1, 0)"
        },
        {
          "expr": "Eq(x0_2, 0)"
        },
        {
          "expr": "Eq(x3_2, 0)"
        },
        {
          "expr": "Eq(x4_2, 0)"
        },
        {
          "expr": "Eq(x0_3, 0)"
        },
        {
          "expr": "Eq(x3_3, 0)"
        },
        {
          "expr": "Eq(x4_3, 0)"
        },
        {
          "expr": "Eq(x0_4, 0)"
        },
        {
          "expr": "Eq(x1_4, 0)"
        },
        {
          "expr": "Eq(x4_4, 0)"
        },
        {
          "expr": "Eq(x0_5, 0)"
        },
        {
          "expr": "Eq(x1_5, 0)"
        }
      ],
      "objective_type": "Min",
      "objective_function": {
        "expr": "x0_5 + 2*x1_5 + 3*x2_5 + 4*x3_5 + 5*x4_5"
      }
    }
  ],
  "classical_execution_code": "\nvqe_result = vqe(\n    hamiltonian=optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 20.0),\n    maximize=False,\n    initial_point=compute_qaoa_initial_point(optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 20.0),8),\n    optimizer=Optimizer.COBYLA,\n    max_iteration=1,\n    tolerance=0.0,\n    step_size=0.0,\n    skip_compute_variance=False,\n    alpha_cvar=0.6\n)\nsolution = get_optimization_solution(get_type(MyCombiProblem), vqe_result, 20.0)\nhamiltonian = optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 20.0)\nsave({'solution': solution, \"vqe_result\": vqe_result, \"hamiltonian\": hamiltonian})\n"
}
