qstruct EstimationVars {
  x1: qnum<2>;
  x2: qnum<2>;
  integrator: qnum<5, False, 2>;
}

qfunc oracle(est_reg: qbit[]) {
  Z(est_reg[est_reg.len - 1]);
}

qfunc affine_max(const x1: qnum, const x2: qnum, permutable output res: qnum) {
  res = max(x1 * 1.0, ((x1 * 0.75) + (x2 * 0.75)) + (-1.25));
}

qfunc integrator(const x: qnum, ref: qnum, res: qbit) {
  prepare_exponential_state(-((1 / (2 ** x.fraction_digits)) * 0.4341), ref);
  res ^= x >= ref;
}

qfunc integration_payoff(const max_reg: qnum, integrator_reg: qnum, ind_reg: qbit) {
  control (max_reg > 1.5) {
    integrator(max_reg, integrator_reg, ind_reg);
  } else {
    RY(2 * asin(sqrt((190 - ((193.97 * exp(-0.7408)) * (1 / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341)))) / ((193.97 * exp(-0.7408)) * ((exp((2 ** max_reg.size) * ((1 / (2 ** max_reg.fraction_digits)) * 0.4341)) - 1) / exp((1 / (2 ** max_reg.fraction_digits)) * 0.4341))))), ind_reg);
  }
}

qfunc rainbow_integration(qvars: EstimationVars, ind: qbit) {
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x1);
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x2);
  max_out: qnum;
  within {
    affine_max(qvars.x1, qvars.x2, max_out);
  } apply {
    integration_payoff(max_out, qvars.integrator, ind);
  }
}

qfunc space_transform(est_reg: qbit[]) {
  rainbow_integration(est_reg[0:est_reg.len - 1], est_reg[est_reg.len - 1]);
}

qfunc main(k: int, output indicator: qbit) {
  est_reg: qbit[];
  problem_vars: qbit[9];
  allocate(problem_vars);
  allocate(indicator);
  within {
    {problem_vars, indicator} -> est_reg;
  } apply {
    amplitude_amplification(k, oracle, space_transform, est_reg);
  }
}
