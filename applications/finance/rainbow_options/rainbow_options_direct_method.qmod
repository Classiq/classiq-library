qstruct EstimationVars {
  x1: qnum<2>;
  x2: qnum<2>;
  aux: qnum<5>;
}

qfunc oracle(est_reg: qbit[]) {
  Z(est_reg[est_reg.len - 1]);
}

qfunc affine_max(const x1: qnum, const x2: qnum, permutable output res: qnum) {
  res = max(x1 * 1.0, ((x1 * 0.75) + (x2 * 0.75)) + (-1.25));
}

qfunc exponential_amplitude_loading(exp_rate: real, const x: qbit[], aux: qbit[], res: qbit) {
  within {
    apply_to_all(X, x);
  } apply {
    repeat (index: x.len) {
      control (x[index]) {
        RY(2 * acos(1 / sqrt(exp(exp_rate * (2 ** index)))), aux[index]);
      }
    }
  }
  aux_num: qnum;
  within {
    aux -> aux_num;
  } apply {
    res ^= aux_num == 0;
  }
}

qfunc direct_payoff(const max_reg: qnum, aux_reg: qnum, ind_reg: qbit) {
  control (max_reg > 1.5) {
    exponential_amplitude_loading((1 / (2 ** max_reg.fraction_digits)) * 0.4341, max_reg, aux_reg, ind_reg);
  } else {
    RY(2 * asin(13.784 / sqrt(max(193.97 * exp(((0.4341 * (2 ** (max_reg.size - max_reg.fraction_digits))) * (1 - (1 / (2 ** max_reg.size)))) + (-0.7408)), 190))), ind_reg);
  }
}

qfunc rainbow_direct(qvars: EstimationVars, ind: qbit) {
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x1);
  inplace_prepare_state([
    0.0656,
    0.4344,
    0.4344,
    0.0656
  ], 0, qvars.x2);
  max_out: qnum;
  within {
    affine_max(qvars.x1, qvars.x2, max_out);
  } apply {
    direct_payoff(max_out, qvars.aux, ind);
  }
}

qfunc space_transform(est_reg: qbit[]) {
  rainbow_direct(est_reg[0:est_reg.len - 1], est_reg[est_reg.len - 1]);
}

qfunc main(k: int, output indicator: qbit) {
  est_reg: qbit[];
  problem_vars: qbit[9];
  allocate(problem_vars);
  allocate(indicator);
  within {
    {problem_vars, indicator} -> est_reg;
  } apply {
    amplitude_amplification(k, oracle, space_transform, est_reg);
  }
}
