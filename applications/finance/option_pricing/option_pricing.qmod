qstruct OptionPricingState {
  asset: qnum<5, False, 0>;
  ind: qbit;
}

qfunc iqae_oracle(state: OptionPricingState) {
  Z(state.ind);
}

qfunc load_distribution(asset: qnum) {
  inplace_prepare_state([
    0.0001,
    0.0003,
    0.0008,
    0.0019,
    0.004,
    0.0074,
    0.0126,
    0.0198,
    0.0288,
    0.0392,
    0.0501,
    0.0605,
    0.0692,
    0.0755,
    0.0787,
    0.0788,
    0.0759,
    0.0705,
    0.0634,
    0.0553,
    0.0469,
    0.0387,
    0.0312,
    0.0246,
    0.0189,
    0.0143,
    0.0106,
    0.0077,
    0.0055,
    0.0039,
    0.0027,
    0.0019
  ], 0, asset);
}

qfunc payoff_linear(asset: qnum, ind: qbit) {
  ind *= sqrt(abs((((asset * 0.0513) + 1.2355) - 1.9) / 0.9262));
}

qfunc payoff(asset: qnum, ind: qbit) {
  control (asset >= ceiling(12.9503)) {
    payoff_linear(asset, ind);
  }
}

qfunc european_call_state_preparation(state: OptionPricingState) {
  load_distribution(state.asset);
  payoff(state.asset, state.ind);
}

qfunc iqae_algorithm(k: int, oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  sp_operand(x);
  power (k) {
    grover_operator(oracle_operand, sp_operand, x);
  }
}

qfunc main(k: int, output ind: qbit) {
  state: OptionPricingState;
  asset: qbit[];
  allocate(state.size, state);
  iqae_algorithm(k, iqae_oracle, european_call_state_preparation, state);
  state -> {asset, ind};
}

cscope ```
iqae_res = iqae(epsilon=0.05, alpha=0.01)
save({'iqae_res': iqae_res})
```
