qfunc qmci<space_transform: qfunc (arg0: qbit[], arg1: qbit)>(phase: qnum, packed_vars: qbit[]) {
  amplitude_estimation<lambda(arg0) {
<<<<<<< HEAD
<<<<<<< HEAD
    Z(arg0[(arg0.len) - 1]);
  }, lambda(arg0) {
    space_transform(arg0[0:(arg0.len) - 1], arg0[(arg0.len) - 1]);
=======
    Z(arg0[arg0.len - 1]);
  }, lambda(arg0) {
    space_transform(arg0[0:arg0.len - 1], arg0[arg0.len - 1]);
>>>>>>> 991980ef0472d4a1f0e4f3caa0a1c1046ab9fbeb
=======
    Z(arg0[arg0.len - 1]);
  }, lambda(arg0) {
    space_transform(arg0[0:arg0.len - 1], arg0[arg0.len - 1]);
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
  }>(phase, packed_vars);
}

qfunc main(output phase_port: qbit[2]) {
  unitary_port: qbit[];
  allocate<6>(unitary_port);
  allocate_num<2, False, 2>(phase_port);
  qmci<lambda(arg0, arg1) {
    log_normal_finance<LogNormalModel {
<<<<<<< HEAD
<<<<<<< HEAD
      num_qubits = 5,
      mu = 0.7,
      sigma = 0.13
    }, FinanceFunction {
      f = FinanceFunctionType::EUROPEAN_CALL_OPTION,
      threshold = 1.9,
      larger = True,
      polynomial_degree = 0,
      use_chebyshev_polynomial_approximation = False,
      tail_probability = 0.0
=======
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
      num_qubits=5,
      mu=0.7,
      sigma=0.13
    }, FinanceFunction {
      f=FinanceFunctionType::EUROPEAN_CALL_OPTION,
      threshold=1.9,
      larger=True,
      polynomial_degree=0,
      use_chebyshev_polynomial_approximation=False,
      tail_probability=0.0
<<<<<<< HEAD
>>>>>>> 991980ef0472d4a1f0e4f3caa0a1c1046ab9fbeb
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
    }>(arg0, arg1);
  }>(phase_port, unitary_port);
}

cscope ```
<<<<<<< HEAD
<<<<<<< HEAD

=======
>>>>>>> 991980ef0472d4a1f0e4f3caa0a1c1046ab9fbeb
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
def execute_amplitude_estimation(phase_port_size):
    result = sample()
    estimation = qae_with_qpe_result_post_processing(
        estimation_register_size=phase_port_size,
        estimation_method=1,
        result=result
    )
    save({"result": result, "estimation": estimation})
    return estimation

estimation = execute_amplitude_estimation(2)
result = log_normal_finance_post_process(struct_literal(LogNormalModel, num_qubits=5, mu=0.7, sigma=0.13), struct_literal(FinanceFunction, f=FinanceFunctionType.EUROPEAN_CALL_OPTION, threshold=1.9, larger=True, polynomial_degree=0, use_chebyshev_polynomial_approximation=False, tail_probability=0.0), estimation)
save({'result': result})
<<<<<<< HEAD
<<<<<<< HEAD

=======
>>>>>>> 991980ef0472d4a1f0e4f3caa0a1c1046ab9fbeb
=======
>>>>>>> f7386d5a02b35677da04846cd26d5ba60930f8cb
```
