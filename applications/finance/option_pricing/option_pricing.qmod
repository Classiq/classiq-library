qfunc oracle(est_reg: qbit[]) {
  Z(est_reg[est_reg.len - 1]);
}

qfunc load_distribution(asset: qnum) {
  inplace_prepare_state([
    0.0001096665,
    0.000325131,
    0.0008423406,
    0.0019330863,
    0.0039764136,
    0.0074083288,
    0.0126157287,
    0.019796302,
    0.0288308524,
    0.0392206066,
    0.0501234708,
    0.0604877711,
    0.0692466213,
    0.0755165222,
    0.0787466388,
    0.0787861125,
    0.0758647471,
    0.0705062166,
    0.0634057464,
    0.0553049808,
    0.046888762,
    0.0387167866,
    0.0311920107,
    0.0245598482,
    0.0189284118,
    0.0142996499,
    0.0106030118,
    0.0077259727,
    0.0055384217,
    0.0039100417,
    0.0027212013,
    0.0018685977
  ], 0, asset);
}

qfunc payoff_linear(const asset: qnum, ind: qbit) {
  ind *= sqrt(abs((((asset * 0.0513152339) + 1.2354548887) - 1.9) / 0.9262271399));
}

qfunc payoff(const asset: qnum, ind: qbit) {
  control (asset >= ceiling(12.9502500662)) {
    payoff_linear(asset, ind);
  }
}

qfunc european_call_state_preparation(asset: qnum, ind: qbit) {
  load_distribution(asset);
  payoff(asset, ind);
}

qfunc space_transform(est_reg: qbit[]) {
  european_call_state_preparation(est_reg[0:est_reg.len - 1], est_reg[est_reg.len - 1]);
}

qfunc main(k: int, output indicator: qbit) {
  est_reg: qbit[];
  problem_vars: qbit[5];
  allocate(problem_vars);
  allocate(indicator);
  within {
    {problem_vars, indicator} -> est_reg;
  } apply {
    amplitude_amplification(k, oracle, space_transform, est_reg);
  }
}
