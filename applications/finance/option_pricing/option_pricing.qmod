qstruct OptionPricingState {
  asset: qnum<5, False, 0>;
  ind: qbit;
}

qfunc iqae_oracle(state: OptionPricingState) {
  Z(state.ind);
}

qfunc load_distribution(asset: qnum) {
  inplace_prepare_state([
    0.0001096665,
    0.000325131,
    0.0008423406,
    0.0019330863,
    0.0039764136,
    0.0074083288,
    0.0126157287,
    0.019796302,
    0.0288308524,
    0.0392206066,
    0.0501234708,
    0.0604877711,
    0.0692466213,
    0.0755165222,
    0.0787466388,
    0.0787861125,
    0.0758647471,
    0.0705062166,
    0.0634057464,
    0.0553049808,
    0.046888762,
    0.0387167866,
    0.0311920107,
    0.0245598482,
    0.0189284118,
    0.0142996499,
    0.0106030118,
    0.0077259727,
    0.0055384217,
    0.0039100417,
    0.0027212013,
    0.0018685977
  ], 0, asset);
}

qfunc payoff_linear(asset: qnum, ind: qbit) {
  ind *= sqrt(abs((((asset * 0.0513152339) + 1.2354548887) - 1.9) / 0.9262271399));
}

qfunc payoff(asset: qnum, ind: qbit) {
  control (asset >= ceiling(12.9502500662)) {
    payoff_linear(asset, ind);
  }
}

qfunc european_call_state_preparation(state: OptionPricingState) {
  load_distribution(state.asset);
  payoff(state.asset, state.ind);
}

qfunc iqae_algorithm(k: int, oracle_operand: qfunc (qbit[]), sp_operand: qfunc (qbit[]), x: qbit[]) {
  sp_operand(x);
  power (k) {
    grover_operator(oracle_operand, sp_operand, x);
  }
}

qfunc main(k: int, output ind: qbit) {
  state: OptionPricingState;
  asset: qbit[];
  allocate(state.size, state);
  iqae_algorithm(k, iqae_oracle, european_call_state_preparation, state);
  state -> {asset, ind};
}

cscope ```
iqae_res = iqae(epsilon=0.05, alpha=0.01)
save({'iqae_res': iqae_res})
```
