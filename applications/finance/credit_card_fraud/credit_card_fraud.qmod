qfunc my_pauli_kernel_expanded___0(qba: qbit[3]) {
  power (2) {
    hadamard_transform(qba);
    suzuki_trotter([
      PauliTerm {
        pauli=[3, 0, 0],
        coefficient=data1_param_0
      },
      PauliTerm {
        pauli=[0, 3, 0],
        coefficient=data1_param_1
      },
      PauliTerm {
        pauli=[0, 0, 3],
        coefficient=data1_param_2
      },
      PauliTerm {
        pauli=[3, 3, 0],
        coefficient=(data1_param_0 - 3.1416) * (data1_param_1 - 3.1416)
      },
      PauliTerm {
        pauli=[3, 0, 3],
        coefficient=(data1_param_0 - 3.1416) * (data1_param_2 - 3.1416)
      },
      PauliTerm {
        pauli=[0, 3, 3],
        coefficient=(data1_param_1 - 3.1416) * (data1_param_2 - 3.1416)
      }
    ], -1, 1, 1, qba);
  }
}

qfunc my_pauli_kernel_expanded___1(qba: qbit[3]) {
  power (2) {
    hadamard_transform(qba);
    suzuki_trotter([
      PauliTerm {
        pauli=[3, 0, 0],
        coefficient=data2_param_0
      },
      PauliTerm {
        pauli=[0, 3, 0],
        coefficient=data2_param_1
      },
      PauliTerm {
        pauli=[0, 0, 3],
        coefficient=data2_param_2
      },
      PauliTerm {
        pauli=[3, 3, 0],
        coefficient=(data2_param_0 - 3.1416) * (data2_param_1 - 3.1416)
      },
      PauliTerm {
        pauli=[3, 0, 3],
        coefficient=(data2_param_0 - 3.1416) * (data2_param_2 - 3.1416)
      },
      PauliTerm {
        pauli=[0, 3, 3],
        coefficient=(data2_param_1 - 3.1416) * (data2_param_2 - 3.1416)
      }
    ], -1, 1, 1, qba);
  }
}

qfunc main(output qba: qnum<3, False, 0>) {
  allocate(3, qba);
  my_pauli_kernel_expanded___0(qba);
  invert {
    my_pauli_kernel_expanded___1(qba);
  }
}
