qfunc hadamard_transform_expanded___0(target: qbit[3]) {
  repeat (index: 3) {
    H(target[index]);
  }
}

qfunc pauli_kernel_expanded___0(data: real[], reps: int, qba: qbit[3]) {
  power (reps) {
    hadamard_transform_expanded___0(qba);
    multi_suzuki_trotter([
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=0}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      },
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=1}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      },
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=2}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      },
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=0},
              IndexedPauli {pauli=3, index=1}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      },
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=0},
              IndexedPauli {pauli=3, index=2}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      },
      SparsePauliOp {
        terms=[
          SparsePauliTerm {
            paulis=[
              IndexedPauli {pauli=3, index=1},
              IndexedPauli {pauli=3, index=2}
            ],
            coefficient=1
          }
        ],
        num_qubits=3
      }
    ], [
      data[0],
      data[1],
      data[2],
      ((data[0] - 3.1416) * (data[1] - 3.1416)),
      ((data[0] - 3.1416) * (data[2] - 3.1416)),
      ((data[1] - 3.1416) * (data[2] - 3.1416))
    ], 1, 1, qba);
  }
}

qfunc main(data1: real[3], data2: real[3], output qba: qnum<3, False, 0>) {
  allocate(3, qba);
  pauli_kernel_expanded___0(data1, 2, qba);
  invert {
    pauli_kernel_expanded___0(data2, 2, qba);
  }
}
