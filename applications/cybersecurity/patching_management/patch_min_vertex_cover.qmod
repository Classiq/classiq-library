qstruct QAOAVars {
  x: qbit[8];
}

qfunc main(params: real[6], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 3) {
    phase (-(((((((((((((((((((((((((v.x[0] + v.x[1]) + v.x[2]) + v.x[3]) + v.x[4]) + v.x[5]) + v.x[6]) + v.x[7]) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[1]) ** 2))) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[2]) ** 2))) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[3]) ** 2))) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[5]) ** 2))) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[6]) ** 2))) + ((20 * ((1 - v.x[0]) ** 2)) * ((1 - v.x[7]) ** 2))) + ((20 * ((1 - v.x[1]) ** 2)) * ((1 - v.x[2]) ** 2))) + ((20 * ((1 - v.x[1]) ** 2)) * ((1 - v.x[3]) ** 2))) + ((20 * ((1 - v.x[1]) ** 2)) * ((1 - v.x[6]) ** 2))) + ((20 * ((1 - v.x[2]) ** 2)) * ((1 - v.x[7]) ** 2))) + ((20 * ((1 - v.x[3]) ** 2)) * ((1 - v.x[5]) ** 2))) + ((20 * ((1 - v.x[3]) ** 2)) * ((1 - v.x[6]) ** 2))) + ((20 * ((1 - v.x[3]) ** 2)) * ((1 - v.x[7]) ** 2))) + ((20 * ((1 - v.x[4]) ** 2)) * ((1 - v.x[5]) ** 2))) + ((20 * ((1 - v.x[4]) ** 2)) * ((1 - v.x[7]) ** 2))) + ((20 * ((1 - v.x[5]) ** 2)) * ((1 - v.x[6]) ** 2))) + ((20 * ((1 - v.x[5]) ** 2)) * ((1 - v.x[7]) ** 2))) + ((20 * ((1 - v.x[6]) ** 2)) * ((1 - v.x[7]) ** 2))), params[i]);
    apply_to_all(lambda(q) {
      RX(params[3 + i], q);
    }, v);
  }
}
