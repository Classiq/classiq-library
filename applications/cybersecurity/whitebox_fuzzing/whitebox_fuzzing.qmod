qfunc my_sp(x: qnum, y: qnum) {
  hadamard_transform(x);
  hadamard_transform(y);
}

qfunc my_predicate(x: qnum, y: qnum, res: qbit) {
  res ^= ((x + y) < 9) and (((x * y) % 4) == 1);
}

qfunc prep_minus(output out: qbit) {
  allocate<1>(out);
  X(out);
  H(out);
}

qfunc my_oracle<predicate: qfunc (arg0: qbit)>() {
  aux: qbit;
  within {
    prep_minus(aux);
  } apply {
    predicate(aux);
  }
}

qfunc zero_predicate(x: qnum, y: qnum, res: qbit) {
  joined: qnum<x.size + y.size, False, 0>;
  {x, y} -> joined;
  control (joined == 0) {
    X(res);
  }
  joined -> {x, y};
}

qfunc my_diffuser<sp_operand: qfunc (arg0: qnum, arg1: qnum)>(x: qnum, y: qnum) {
  within {
    invert {
      sp_operand(x, y);
    }
  } apply {
    my_oracle<lambda(arg0) {
      zero_predicate(x, y, arg0);
    }>();
  }
}

qfunc my_grover_operator<oracle_operand: qfunc (), diffuser_operand: qfunc ()>() {
  oracle_operand();
  diffuser_operand();
}

qfunc main(output x: qnum, output y: qnum) {
  allocate_num<6, False, 0>(x);
  allocate_num<6, False, 0>(y);
  my_sp(x, y);
  power (4) {
    my_grover_operator<lambda() {
      my_oracle<lambda(arg0) {
        my_predicate(x, y, arg0);
      }>();
    }, lambda() {
      my_diffuser<lambda(arg0, arg1) {
        my_sp(arg0, arg1);
      }>(x, y);
    }>();
  }
}
