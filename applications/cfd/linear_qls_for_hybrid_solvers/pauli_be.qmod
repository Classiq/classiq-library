qfunc multiplex_ra_expanded___0(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.58904862, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.9817477, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___1(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(1.17809725, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-1.17809725, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___2(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___3(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(-0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___4(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___5(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc apply_phase_table_expanded___0(target: qbit[5]) {
  PHASE(-0.9817477, target[0]);
  CX(target[0], target[1]);
  PHASE(-0.19634954, target[1]);
  CX(target[0], target[1]);
  PHASE(-1.17809725, target[1]);
  CX(target[1], target[2]);
  PHASE(0, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.58904862, target[2]);
  CX(target[1], target[2]);
  PHASE(0.19634954, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.78539816, target[2]);
  CX(target[2], target[3]);
  PHASE(0.39269908, target[3]);
  CX(target[0], target[3]);
  PHASE(0.58904862, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.19634954, target[3]);
  CX(target[0], target[3]);
  PHASE(-1.17809725, target[3]);
  CX(target[2], target[3]);
  PHASE(0, target[3]);
  CX(target[0], target[3]);
  PHASE(0.19634954, target[3]);
  CX(target[1], target[3]);
  PHASE(0.19634954, target[3]);
  CX(target[0], target[3]);
  PHASE(0.78539816, target[3]);
  CX(target[3], target[4]);
  PHASE(-1.57079633, target[4]);
  CX(target[0], target[4]);
  PHASE(0.58904862, target[4]);
  CX(target[1], target[4]);
  PHASE(0.58904862, target[4]);
  CX(target[0], target[4]);
  PHASE(0.78539816, target[4]);
  CX(target[2], target[4]);
  PHASE(0.39269908, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.58904862, target[4]);
  CX(target[1], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[0], target[4]);
  PHASE(0.39269908, target[4]);
  CX(target[3], target[4]);
  PHASE(-0.78539816, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.9817477, target[4]);
  CX(target[0], target[4]);
  PHASE(1.57079633, target[4]);
  CX(target[2], target[4]);
  PHASE(-0.39269908, target[4]);
  CX(target[0], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.58904862, target[4]);
  CX(target[0], target[4]);
  PHASE(0.39269908, target[4]);
}

qfunc lcu_paulis_graycode_expanded___0(data: qbit[3], block: qbit[5]) {
  within {
    inplace_prepare_state([
      0.29762056,
      0.02240875,
      0.02012199,
      0.02109664,
      0.01694402,
      0.01400259,
      0.00171071,
      0.02411908,
      0.13808659,
      0.02234566,
      0.0200589,
      0.02234566,
      0.01859126,
      0.02234566,
      0.01005378,
      0.02234566,
      0.07914247,
      0.07914247,
      0.00171033,
      0.00171033,
      0.03602421,
      0.03602421,
      0.03602421,
      0.03602421,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ], 0.0, block);
  } apply {
    multiplex_ra_expanded___0(block, data[0]);
    multiplex_ra_expanded___1(block, data[0]);
    multiplex_ra_expanded___2(block, data[1]);
    multiplex_ra_expanded___3(block, data[1]);
    multiplex_ra_expanded___4(block, data[2]);
    multiplex_ra_expanded___5(block, data[2]);
    apply_phase_table_expanded___0(block);
  }
}

qfunc block_encode_pauli_expanded___0(block: qnum<5, False, 0>, data: qnum<3, False, 0>) {
  lcu_paulis_graycode_expanded___0(data, block);
}

qfunc main(output data: qnum<3, False, 0>, output block: qnum<5, False, 0>) {
  allocate(5, block);
  prepare_amplitudes([
    (-0.61366173),
    (-0.10827523),
    0.07987955,
    0.26167994,
    (-0.1519741),
    (-0.06328419),
    (-0.57966304),
    0.41680735
  ], 0.0, data);
  block_encode_pauli_expanded___0(block, data);
}
