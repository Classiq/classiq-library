qfunc multiplex_ra_expanded___0(qba: qbit[5], ind: qbit) {
  RZ(-1.1781, ind);
  CX(qba[0], ind);
  RZ(-0.1963, ind);
  CX(qba[1], ind);
  RZ(-0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.1963, ind);
  CX(qba[1], ind);
  RZ(-0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.1963, ind);
  CX(qba[1], ind);
  RZ(0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.1963, ind);
  CX(qba[1], ind);
  RZ(0.589, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
  RZ(0.3927, ind);
  CX(qba[0], ind);
  RZ(0.9817, ind);
  CX(qba[1], ind);
  RZ(0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.1963, ind);
  CX(qba[1], ind);
  RZ(0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.1963, ind);
  CX(qba[1], ind);
  RZ(-0.1963, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.1963, ind);
  CX(qba[1], ind);
  RZ(0.1963, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___1(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(1.1781, ind);
  CX(qba[1], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.3927, ind);
  CX(qba[1], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.3927, ind);
  CX(qba[1], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.3927, ind);
  CX(qba[1], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-1.1781, ind);
  CX(qba[1], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.3927, ind);
  CX(qba[1], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.3927, ind);
  CX(qba[1], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.3927, ind);
  CX(qba[1], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___2(qba: qbit[5], ind: qbit) {
  RZ(-1.1781, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.7854, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(-0.3927, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
  RZ(0.3927, ind);
  CX(qba[0], ind);
  RZ(0.3927, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.7854, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0.3927, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___3(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.7854, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0.7854, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.7854, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(-0.7854, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___4(qba: qbit[5], ind: qbit) {
  RZ(-1.1781, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.3927, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.7854, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.3927, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
  RZ(0.3927, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(-0.3927, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0.7854, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.3927, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___5(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.3927, ind);
  CX(qba[2], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.3927, ind);
  CX(qba[2], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.3927, ind);
  CX(qba[2], ind);
  RY(0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.3927, ind);
  CX(qba[2], ind);
  RY(-0.3927, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc apply_phase_table_expanded___0(target: qbit[5]) {
  PHASE(-0.9817, target[0]);
  CX(target[0], target[1]);
  PHASE(-0.1963, target[1]);
  CX(target[0], target[1]);
  PHASE(-1.1781, target[1]);
  CX(target[1], target[2]);
  PHASE(0, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.589, target[2]);
  CX(target[1], target[2]);
  PHASE(0.1963, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.7854, target[2]);
  CX(target[2], target[3]);
  PHASE(0.3927, target[3]);
  CX(target[0], target[3]);
  PHASE(0.589, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.1963, target[3]);
  CX(target[0], target[3]);
  PHASE(-1.1781, target[3]);
  CX(target[2], target[3]);
  PHASE(0, target[3]);
  CX(target[0], target[3]);
  PHASE(0.1963, target[3]);
  CX(target[1], target[3]);
  PHASE(0.1963, target[3]);
  CX(target[0], target[3]);
  PHASE(0.7854, target[3]);
  CX(target[3], target[4]);
  PHASE(-1.5708, target[4]);
  CX(target[0], target[4]);
  PHASE(0.589, target[4]);
  CX(target[1], target[4]);
  PHASE(0.589, target[4]);
  CX(target[0], target[4]);
  PHASE(0.7854, target[4]);
  CX(target[2], target[4]);
  PHASE(0.3927, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.589, target[4]);
  CX(target[1], target[4]);
  PHASE(0.1963, target[4]);
  CX(target[0], target[4]);
  PHASE(0.3927, target[4]);
  CX(target[3], target[4]);
  PHASE(-0.7854, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.1963, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.9817, target[4]);
  CX(target[0], target[4]);
  PHASE(1.5708, target[4]);
  CX(target[2], target[4]);
  PHASE(-0.3927, target[4]);
  CX(target[0], target[4]);
  PHASE(0.1963, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.589, target[4]);
  CX(target[0], target[4]);
  PHASE(0.3927, target[4]);
}

qfunc lcu_paulis_graycode_expanded___0(data: qbit[3], block: qbit[5]) {
  within {
    inplace_prepare_state([
      0.2976,
      0.0224,
      0.0201,
      0.0211,
      0.0169,
      0.014,
      0.0017,
      0.0241,
      0.1381,
      0.0223,
      0.0201,
      0.0223,
      0.0186,
      0.0223,
      0.0101,
      0.0223,
      0.0791,
      0.0791,
      0.0017,
      0.0017,
      0.036,
      0.036,
      0.036,
      0.036,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ], 0.0, block);
  } apply {
    multiplex_ra_expanded___0(block, data[0]);
    multiplex_ra_expanded___1(block, data[0]);
    multiplex_ra_expanded___2(block, data[1]);
    multiplex_ra_expanded___3(block, data[1]);
    multiplex_ra_expanded___4(block, data[2]);
    multiplex_ra_expanded___5(block, data[2]);
    apply_phase_table_expanded___0(block);
  }
}

qfunc block_encode_pauli_expanded___0(block: qnum<5, False, 0>, data: qnum<3, False, 0>) {
  lcu_paulis_graycode_expanded___0(data, block);
}

qfunc main(output data: qnum<3, False, 0>, output block: qnum<5, False, 0>) {
  allocate(5, block);
  prepare_amplitudes([
    0.0322,
    0.2268,
    0.5447,
    0.3577,
    0.6741,
    0.1575,
    0.1913,
    (-0.0845)
  ], 0.0, data);
  block_encode_pauli_expanded___0(block, data);
}
