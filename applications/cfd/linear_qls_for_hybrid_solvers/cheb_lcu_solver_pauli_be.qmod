@disable_perm_check
@disable_const_checks(packed_vars)
qperm reflect_about_zero_expanded___0(const packed_vars: qbit[5]) {
  msbs: qnum<4, False, 0>;
  lsb: qbit;
  packed_vars -> {msbs, lsb};
  within {
    X(lsb);
    H(lsb);
  } apply {
    control (msbs == 0) {
      X(lsb);
    }
  }
  {msbs, lsb} -> packed_vars;
}

qfunc my_reflect_about_zero_expanded___0(qba: qbit[5]) {
  reflect_about_zero_expanded___0(qba);
  RY(6.28318531, qba[0]);
}

qfunc multiplex_ra_expanded___0(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.58904862, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.9817477, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___1(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(1.17809725, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-1.17809725, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___2(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___3(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(-0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___4(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___5(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___6(qba: qbit[5], ind: qbit) {
  RZ(-1.96349541, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(-1.17809725, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___7(qba: qbit[5], ind: qbit) {
  RY(1.57079633, ind);
  CX(qba[0], ind);
  RY(0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(-0.78539816, ind);
  CX(qba[0], ind);
  RY(1.57079633, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc apply_phase_table_expanded___0(target: qbit[5]) {
  PHASE(-0.58904862, target[0]);
  CX(target[0], target[1]);
  PHASE(-0.19634954, target[1]);
  CX(target[0], target[1]);
  PHASE(-1.17809725, target[1]);
  CX(target[1], target[2]);
  PHASE(-0.78539816, target[2]);
  CX(target[0], target[2]);
  PHASE(0.19634954, target[2]);
  CX(target[1], target[2]);
  PHASE(0.19634954, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.78539816, target[2]);
  CX(target[2], target[3]);
  PHASE(0.39269908, target[3]);
  CX(target[0], target[3]);
  PHASE(0.58904862, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.9817477, target[3]);
  CX(target[0], target[3]);
  PHASE(-0.39269908, target[3]);
  CX(target[2], target[3]);
  PHASE(0, target[3]);
  CX(target[0], target[3]);
  PHASE(0.19634954, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.19634954, target[3]);
  CX(target[0], target[3]);
  PHASE(1.96349541, target[3]);
  CX(target[3], target[4]);
  PHASE(-1.96349541, target[4]);
  CX(target[0], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(0.58904862, target[4]);
  CX(target[0], target[4]);
  PHASE(0.78539816, target[4]);
  CX(target[2], target[4]);
  PHASE(1.17809725, target[4]);
  CX(target[0], target[4]);
  PHASE(-1.37444679, target[4]);
  CX(target[1], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[0], target[4]);
  PHASE(0.39269908, target[4]);
  CX(target[3], target[4]);
  PHASE(-0.78539816, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.19634954, target[4]);
  CX(target[0], target[4]);
  PHASE(0.78539816, target[4]);
  CX(target[2], target[4]);
  PHASE(-0.39269908, target[4]);
  CX(target[0], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.19634954, target[4]);
  CX(target[0], target[4]);
  PHASE(0.78539816, target[4]);
}

qfunc lcu_paulis_graycode_expanded___0(data: qbit[4], block: qbit[5]) {
  within {
    inplace_prepare_state([
      0.29762056,
      0.02240875,
      0.02012199,
      0.02109664,
      0.01694402,
      0.01400259,
      0.00171071,
      0.02411908,
      0.13808659,
      0.02234566,
      0.0200589,
      0.02234566,
      0.01859126,
      0.02234566,
      0.01005378,
      0.02234566,
      0.07914247,
      0.07914247,
      0.00171033,
      0.00171033,
      0.03602421,
      0.03602421,
      0.03602421,
      0.03602421,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ], 0.0, block);
  } apply {
    multiplex_ra_expanded___0(block, data[0]);
    multiplex_ra_expanded___1(block, data[0]);
    multiplex_ra_expanded___2(block, data[1]);
    multiplex_ra_expanded___3(block, data[1]);
    multiplex_ra_expanded___4(block, data[2]);
    multiplex_ra_expanded___5(block, data[2]);
    multiplex_ra_expanded___6(block, data[3]);
    multiplex_ra_expanded___7(block, data[3]);
    apply_phase_table_expanded___0(block);
  }
}

qfunc be_qfunc_expanded___0(block: qnum<5, False, 0>, data: qnum<4, False, 0>) {
  lcu_paulis_graycode_expanded___0(data, block);
}

qfunc walk_operator_expanded___0(block: qbit[5], data: qbit[4]) {
  be_qfunc_expanded___0(block, data);
  my_reflect_about_zero_expanded___0(block);
}

qfunc symmetrize_walk_operator_expanded___0(block: qnum<5, False, 0>, data: qbit[4]) {
  my_reflect_about_zero_expanded___0(block);
  within {
    walk_operator_expanded___0(block, data);
  } apply {
    my_reflect_about_zero_expanded___0(block);
  }
}

qfunc lcu_cheb_expanded___0(powers: int[], inv_coeffs: real[], mat_block: qnum<5, False, 0>, data: qbit[4], cheb_block: qbit[4]) {
  within {
    inplace_prepare_state(inv_coeffs, 0.0, cheb_block);
  } apply {
    Z(cheb_block[0]);
    repeat (i: 4) {
      control (cheb_block[i]) {
        power (powers[i]) {
          symmetrize_walk_operator_expanded___0(mat_block, data);
        }
      }
    }
    my_reflect_about_zero_expanded___0(mat_block);
    walk_operator_expanded___0(mat_block, data);
  }
}

qfunc main(output matrix_block: qnum<5, False, 0>, output data: qnum<4, False, 0>, output inv_block: qnum<4, False, 0>) {
  allocate(4, inv_block);
  allocate(5, matrix_block);
  allocate(4, data);
  data_array: qbit[4];
  within {
    data -> data_array;
  } apply {
    inplace_prepare_amplitudes([
      0.61926271,
      (-0.35648446),
      (-0.43503441),
      (-0.27634156),
      0.15674781,
      0.41921399,
      0.15330585,
      0.0
    ], 0.0, data_array[0:3]);
    X(data_array[3]);
  }
  lcu_cheb_expanded___0([1, 2, 4, 8], [
    0.0675011,
    0.06683203,
    0.06616311,
    0.06549445,
    0.06482614,
    0.0641583,
    0.06349101,
    0.06282439,
    0.06215854,
    0.06149354,
    0.06082951,
    0.06016655,
    0.05950475,
    0.05884421,
    0.05818504,
    0.05752732
  ], matrix_block, data, inv_block);
}
