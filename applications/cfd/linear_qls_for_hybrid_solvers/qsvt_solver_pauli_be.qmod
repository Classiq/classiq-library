qstruct BlockEncodedState {
  data: qnum<3>;
  block: qnum<5>;
}

qfunc projector_expanded___0(be: BlockEncodedState, res: qbit) {
  res ^= be.block == 0;
}

qfunc projector_controlled_phase_expanded___0(phase: real, qvar: qbit[8], aux: qbit) {
  within {
    projector_expanded___0(qvar, aux);
  } apply {
    RZ(phase, aux);
  }
}

qfunc multiplex_ra_expanded___0(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.58904862, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.9817477, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(-0.19634954, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.19634954, ind);
  CX(qba[1], ind);
  RZ(0.19634954, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___1(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(1.17809725, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-1.17809725, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[1], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[1], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___2(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___3(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.78539816, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[2], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(-0.78539816, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___4(qba: qbit[5], ind: qbit) {
  RZ(-1.17809725, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.78539816, ind);
  CX(qba[3], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
  RZ(0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[2], ind);
  RZ(-0.39269908, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[3], ind);
  RZ(0.78539816, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[2], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(0, ind);
  CX(qba[1], ind);
  RZ(0, ind);
  CX(qba[0], ind);
  RZ(-0.39269908, ind);
  CX(qba[4], ind);
}

qfunc multiplex_ra_expanded___5(qba: qbit[5], ind: qbit) {
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(-0.39269908, ind);
  CX(qba[2], ind);
  RY(0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[3], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0.39269908, ind);
  CX(qba[2], ind);
  RY(-0.39269908, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[1], ind);
  RY(0, ind);
  CX(qba[0], ind);
  RY(0, ind);
  CX(qba[4], ind);
}

qfunc apply_phase_table_expanded___0(target: qbit[5]) {
  PHASE(-0.9817477, target[0]);
  CX(target[0], target[1]);
  PHASE(-0.19634954, target[1]);
  CX(target[0], target[1]);
  PHASE(-1.17809725, target[1]);
  CX(target[1], target[2]);
  PHASE(0, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.58904862, target[2]);
  CX(target[1], target[2]);
  PHASE(0.19634954, target[2]);
  CX(target[0], target[2]);
  PHASE(-0.78539816, target[2]);
  CX(target[2], target[3]);
  PHASE(0.39269908, target[3]);
  CX(target[0], target[3]);
  PHASE(0.58904862, target[3]);
  CX(target[1], target[3]);
  PHASE(-0.19634954, target[3]);
  CX(target[0], target[3]);
  PHASE(-1.17809725, target[3]);
  CX(target[2], target[3]);
  PHASE(0, target[3]);
  CX(target[0], target[3]);
  PHASE(0.19634954, target[3]);
  CX(target[1], target[3]);
  PHASE(0.19634954, target[3]);
  CX(target[0], target[3]);
  PHASE(0.78539816, target[3]);
  CX(target[3], target[4]);
  PHASE(-1.57079633, target[4]);
  CX(target[0], target[4]);
  PHASE(0.58904862, target[4]);
  CX(target[1], target[4]);
  PHASE(0.58904862, target[4]);
  CX(target[0], target[4]);
  PHASE(0.78539816, target[4]);
  CX(target[2], target[4]);
  PHASE(0.39269908, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.58904862, target[4]);
  CX(target[1], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[0], target[4]);
  PHASE(0.39269908, target[4]);
  CX(target[3], target[4]);
  PHASE(-0.78539816, target[4]);
  CX(target[0], target[4]);
  PHASE(-0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.9817477, target[4]);
  CX(target[0], target[4]);
  PHASE(1.57079633, target[4]);
  CX(target[2], target[4]);
  PHASE(-0.39269908, target[4]);
  CX(target[0], target[4]);
  PHASE(0.19634954, target[4]);
  CX(target[1], target[4]);
  PHASE(-0.58904862, target[4]);
  CX(target[0], target[4]);
  PHASE(0.39269908, target[4]);
}

qfunc lcu_paulis_graycode_expanded___0(data: qbit[3], block: qbit[5]) {
  within {
    inplace_prepare_state([
      0.29762056,
      0.02240875,
      0.02012199,
      0.02109664,
      0.01694402,
      0.01400259,
      0.00171071,
      0.02411908,
      0.13808659,
      0.02234566,
      0.0200589,
      0.02234566,
      0.01859126,
      0.02234566,
      0.01005378,
      0.02234566,
      0.07914247,
      0.07914247,
      0.00171033,
      0.00171033,
      0.03602421,
      0.03602421,
      0.03602421,
      0.03602421,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ], 0.0, block);
  } apply {
    multiplex_ra_expanded___0(block, data[0]);
    multiplex_ra_expanded___1(block, data[0]);
    multiplex_ra_expanded___2(block, data[1]);
    multiplex_ra_expanded___3(block, data[1]);
    multiplex_ra_expanded___4(block, data[2]);
    multiplex_ra_expanded___5(block, data[2]);
    apply_phase_table_expanded___0(block);
  }
}

qfunc be_qfunc_expanded___0(be: BlockEncodedState) {
  lcu_paulis_graycode_expanded___0(be.data, be.block);
}

qfunc u_0_lambda___0_0_expanded___0(x: qbit[8]) {
  invert {
    be_qfunc_expanded___0(x);
  }
}

qfunc qsvt_step_expanded___0(phase1: real, phase2: real, qvar: qbit[8], aux: qbit) {
  u_0_lambda___0_0_expanded___0(qvar);
  projector_controlled_phase_expanded___0(phase1, qvar, aux);
  invert {
    u_0_lambda___0_0_expanded___0(qvar);
  }
  projector_controlled_phase_expanded___0(phase2, qvar, aux);
}

qfunc qsvt_expanded___0(phase_seq: real[], qvar: qbit[8], aux: qbit) {
  H(aux);
  projector_controlled_phase_expanded___0(phase_seq[0], qvar, aux);
  repeat (index: 50) {
    qsvt_step_expanded___0(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], qvar, aux);
  }
  if (False) {
  } else {
    u_0_lambda___0_0_expanded___0(qvar);
    projector_controlled_phase_expanded___0(phase_seq[101], qvar, aux);
  }
  H(aux);
}

qfunc qsvt_inversion_expanded___0(phase_seq: real[], qvar: qbit[8], aux: qbit) {
  qsvt_expanded___0(phase_seq, qvar, aux);
}

qfunc main(output qsvt_aux: qbit, output data: qnum<3, False, 0>, output block: qnum<5, False, 0>) {
  allocate(1, qsvt_aux);
  allocate(5, block);
  prepare_amplitudes([
    0.61926271,
    (-0.35648446),
    (-0.43503441),
    (-0.27634156),
    0.15674781,
    0.41921399,
    0.15330585,
    0.0
  ], 0, data);
  be_state: BlockEncodedState;
  within {
    {data, block} -> be_state;
  } apply {
    qsvt_inversion_expanded___0([
      4.5342816,
      2.85746044,
      2.98202411,
      3.21811391,
      3.21343142,
      3.0951592,
      3.09377837,
      3.19570137,
      3.15264821,
      3.10592306,
      3.13466489,
      3.18466732,
      3.12041284,
      3.12642645,
      3.15507351,
      3.16368248,
      3.10802907,
      3.15110093,
      3.15245279,
      3.14254367,
      3.11493168,
      3.16933274,
      3.13660178,
      3.13630608,
      3.13025677,
      3.17009559,
      3.11821608,
      3.14603519,
      3.140627,
      3.1593403,
      3.11125607,
      3.16243948,
      3.13696619,
      3.14870245,
      3.11750865,
      3.1721606,
      3.12302941,
      3.14872416,
      3.1284217,
      3.17011208,
      3.11093986,
      3.15937475,
      3.13185558,
      3.16068677,
      3.10899212,
      3.17178762,
      3.12546,
      3.15492833,
      3.11399253,
      3.17736106,
      3.12440503,
      3.12440503,
      3.17736106,
      3.11399253,
      3.15492833,
      3.12546,
      3.17178762,
      3.10899212,
      3.16068677,
      3.13185558,
      3.15937475,
      3.11093986,
      3.17011208,
      3.1284217,
      3.14872416,
      3.12302941,
      3.1721606,
      3.11750865,
      3.14870245,
      3.13696619,
      3.16243948,
      3.11125607,
      3.1593403,
      3.140627,
      3.14603519,
      3.11821608,
      3.17009559,
      3.13025677,
      3.13630608,
      3.13660178,
      3.16933274,
      3.11493168,
      3.14254367,
      3.15245279,
      3.15110093,
      3.10802907,
      3.16368248,
      3.15507351,
      3.12642645,
      3.12041284,
      3.18466732,
      3.13466489,
      3.10592306,
      3.15264821,
      3.19570137,
      3.09377837,
      3.0951592,
      3.21343142,
      3.21811391,
      2.98202411,
      2.85746044,
      (-315.90816907)
    ], be_state, qsvt_aux);
  }
}
