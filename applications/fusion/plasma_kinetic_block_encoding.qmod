qstruct BELcu {
  be: BE;
  lcu: qnum<2>;
}

qstruct BE {
  data: BEData;
  block: BEBlock;
}

qstruct BEData {
  v: qnum<3, SIGNED, 0>;
  x: qnum<3>;
  E: qbit;
}

qstruct BEBlock {
  flag: qbit;
  zeta_flag: qbit;
  block_flag: qbit;
  ind: qbit;
  lcu1: qbit;
  lcu2: qbit;
}

qfunc hadamard_transform_expanded___0(target: qbit[7]) {
  repeat (index: 7) {
    H(target[index]);
  }
}

qfunc prepare_ref_expanded___0(data: qnum<7, False, 0>, output data_ref: qnum<7, False, 0>) {
  hadamard_transform_expanded___0(data);
  data_ref = data;
}

qfunc unitaries_5_lambda___0_0_expanded___0(permutable extended_qnum_captured__derivative_dirichlet_be__8: qnum<4, False, 0>) {
  extended_qnum_captured__derivative_dirichlet_be__8 += 1;
}

qfunc unitaries_6_lambda___0_0_expanded___0(permutable extended_qnum_captured__derivative_dirichlet_be__8: qnum<4, False, 0>) {
  extended_qnum_captured__derivative_dirichlet_be__8 += -1;
}

qfunc _load_phases_expanded___0(target: qbit[1]) {
  RZ(3.1416, target[0]);
}

qfunc lcu_expanded___0(block: qnum<1, False, 0>, permutable extended_qnum_captured__derivative_dirichlet_be__8: qnum<4, False, 0>) {
  within {
    inplace_prepare_state([0.5, 0.5], 0, block);
  } apply {
    repeat (i: 2) {
      control (block == i) {
        if (i == 0) {
          unitaries_5_lambda___0_0_expanded___0(extended_qnum_captured__derivative_dirichlet_be__8);
        } else {
          if (i == 1) {
            unitaries_6_lambda___0_0_expanded___0(extended_qnum_captured__derivative_dirichlet_be__8);
          }
        }
      }
    }
    _load_phases_expanded___0(block);
  }
}

qfunc derivative_dirichlet_be_expanded___0(x: qnum<3, False, 0>, flag: qbit, lcu_q: qbit) {
  extended_qnum: qnum<4, False, 0>;
  within {
    {x, flag} -> extended_qnum;
  } apply {
    lcu_expanded___0(lcu_q, extended_qnum);
  }
}

qfunc unitaries_3_lambda___0_0_expanded___0(x_captured__derivative_be__5: qnum<3, False, 0>, flag_captured__derivative_be__5: qbit, lcu2_captured__derivative_be__5: qbit) {
  derivative_dirichlet_be_expanded___0(x_captured__derivative_be__5, flag_captured__derivative_be__5, lcu2_captured__derivative_be__5);
}

qfunc prepare_bounday_x_expanded___0(x: qbit[2]) {
  inplace_prepare_amplitudes([
    (-0.8018),
    0.5345,
    (-0.2673),
    0.0
  ], 0.0, x[0:2]);
}

qfunc derivative_boundary_min_be_expanded___0(x: qnum<2, False, 0>, flag: qbit) {
  invert {
    prepare_bounday_x_expanded___0(x);
  }
  flag ^= x != 0;
}

qfunc apply_to_all_expanded___0(permutable target: qbit[2]) {
  repeat (index: 2) {
    X(target[index]);
  }
}

qfunc derivative_boundary_max_be_expanded___0(x: qnum<2, False, 0>, flag: qbit) {
  within {
    apply_to_all_expanded___0(x);
  } apply {
    RY(6.2832, flag);
    derivative_boundary_min_be_expanded___0(x, flag);
  }
}

qfunc derivative_boundaries_be_expanded___0(x: qbit[3], flag: qbit) {
  control (x[2] == 0) {
    derivative_boundary_min_be_expanded___0(x[0:2], flag);
  } else {
    derivative_boundary_max_be_expanded___0(x[0:2], flag);
  }
}

qfunc unitaries_4_lambda___0_0_expanded___0(x_captured__derivative_be__5: qnum<3, False, 0>, flag_captured__derivative_be__5: qbit) {
  derivative_boundaries_be_expanded___0(x_captured__derivative_be__5, flag_captured__derivative_be__5);
}

qfunc _load_phases_expanded___1(target: qbit[1]) {
  RZ(0, target[0]);
}

qfunc lcu_expanded___1(block: qnum<1, False, 0>, lcu2_captured__derivative_be__5: qbit, x_captured__derivative_be__5: qnum<3, False, 0>, flag_captured__derivative_be__5: qbit) {
  within {
    inplace_prepare_state([0.3483, 0.6517], 0, block);
  } apply {
    repeat (i: 2) {
      control (block == i) {
        if (i == 0) {
          unitaries_3_lambda___0_0_expanded___0(x_captured__derivative_be__5, flag_captured__derivative_be__5, lcu2_captured__derivative_be__5);
        } else {
          if (i == 1) {
            unitaries_4_lambda___0_0_expanded___0(x_captured__derivative_be__5, flag_captured__derivative_be__5);
          }
        }
      }
    }
    _load_phases_expanded___1(block);
  }
}

qfunc derivative_be_expanded___0(x: qnum<3, False, 0>, flag: qbit, lcu1: qbit, lcu2: qbit) {
  lcu_expanded___1(lcu1, lcu2, x, flag);
}

qfunc v_be_expanded___0(v: qnum<3, True, 0>, ind: qbit) {
  ind *= 0.25 * v;
  X(ind);
}

qfunc zeta_be_expanded___0(x: qnum<3, False, 0>, v: qnum<3, True, 0>, flag: qbit) {
  flag ^= (x == 0) & (v > 0);
  flag ^= (x == 7) & (v <= 0);
}

qfunc advective_be_expanded___0(be: BE) {
  derivative_be_expanded___0(be.data.x, be.block.flag, be.block.lcu1, be.block.lcu2);
  v_be_expanded___0(be.data.v, be.block.ind);
  zeta_be_expanded___0(be.data.x, be.data.v, be.block.zeta_flag);
  be.block.block_flag ^= be.data.E;
}

qfunc unitaries_0_lambda___0_0_expanded___0(be_lcu___be_captured__full_be__1: BE) {
  advective_be_expanded___0(be_lcu___be_captured__full_be__1);
}

qfunc load_v_H_vector_expanded___0(v: qnum<3, True, 0>) {
  inplace_prepare_amplitudes([
    0.0,
    (-0.6449),
    (-0.2878),
    (-0.0354),
    0.0014,
    0.0354,
    0.2878,
    0.6449
  ], 0, v);
}

qfunc force_term_be_expanded___0(v: qnum<3, True, 0>, flag: qbit) {
  flag ^= v != 0;
  invert {
    load_v_H_vector_expanded___0(v);
  }
}

qfunc load_v_vector_expanded___0(v: qnum<3, True, 0>) {
  inplace_prepare_amplitudes([
    0.0,
    0.1508,
    0.3015,
    0.4523,
    (-0.603),
    (-0.4523),
    (-0.3015),
    (-0.1508)
  ], 0, v);
}

qfunc current_term_be_expanded___0(v: qnum<3, True, 0>, flag: qbit) {
  load_v_vector_expanded___0(v);
  flag ^= v != 0;
}

qfunc equalize_amplitude_expanded___0(E_field: qnum<1, False, 0>, ind: qbit) {
  ind *= (0.9505 * E_field) + 0.0495;
  X(ind);
}

qfunc off_diag_be_expanded___0(be: BE) {
  X(be.data.E);
  control (be.data.E == 0) {
    force_term_be_expanded___0(be.data.v, be.block.flag);
  } else {
    current_term_be_expanded___0(be.data.v, be.block.flag);
  }
  equalize_amplitude_expanded___0(be.data.E, be.block.ind);
}

qfunc unitaries_1_lambda___0_0_expanded___0(be_lcu___be_captured__full_be__1: BE) {
  off_diag_be_expanded___0(be_lcu___be_captured__full_be__1);
}

qfunc unitaries_2_lambda___0_0_expanded___0(const be_lcu___be_captured__full_be__1: BE) {
  IDENTITY(be_lcu___be_captured__full_be__1);
}

qfunc _load_phases_expanded___2(target: qbit[2]) {
  RZ(-2.3562, target[0]);
  CX(target[0], target[1]);
  RZ(-0.7854, target[1]);
  CX(target[0], target[1]);
  RZ(-0.7854, target[1]);
}

qfunc lcu2_expanded___0(block: qnum<2, False, 0>, be_lcu___be_captured__full_be__1: BE) {
  within {
    inplace_prepare_state([0.0875, 0.8254, 0.0871, 0], 0, block);
  } apply {
    repeat (i: 3) {
      control (block == i) {
        if (i == 0) {
          unitaries_0_lambda___0_0_expanded___0(be_lcu___be_captured__full_be__1);
        } else {
          if (i == 1) {
            unitaries_1_lambda___0_0_expanded___0(be_lcu___be_captured__full_be__1);
          } else {
            if (i == 2) {
              unitaries_2_lambda___0_0_expanded___0(be_lcu___be_captured__full_be__1);
            }
          }
        }
      }
    }
    _load_phases_expanded___2(block);
  }
}

qfunc full_be_expanded___0(be_lcu: BELcu) {
  lcu2_expanded___0(be_lcu.lcu, be_lcu.be);
}

qfunc main(output data: qnum<7, False, 0>, output data_ref: qnum<7, False, 0>, output block: qnum<8, False, 0>) {
  be_lcu: BELcu;
  allocate(15, be_lcu);
  prepare_ref_expanded___0({be_lcu.be.data}, data_ref);
  full_be_expanded___0(be_lcu);
  be_lcu -> {data, block};
}
