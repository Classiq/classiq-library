qfunc my_flexible_qpe<unitary_with_power: qfunc <arg0: int>()>(phase: qbit[]) {
  apply_to_all<H>(phase);
  repeat (index: len(phase)) {
    control (phase[index]) {
      unitary_with_power<2 ** index>();
    }
  }
  invert {
    qft(phase);
  }
}

qfunc main(output reg: qbit[], output phase: qnum) {
  allocate_num<6, False, 6>(phase);
  allocate<1>(reg);
  molecule_hartree_fock<MoleculeProblem {
    mapping = FermionMapping::JORDAN_WIGNER,
    z2_symmetries = True,
    molecule = Molecule {
      atoms = [
        ChemistryAtom {
          element = Element::H,
          position = Position {
            x = 0.0,
            y = 0.0,
            z = 0.0
          }
        },
        ChemistryAtom {
          element = Element::H,
          position = Position {
            x = 0.0,
            y = 0.0,
            z = 0.735
          }
        }
      ],
      spin = 1,
      charge = 0
    },
    freeze_core = True,
    remove_orbitals = []
  }>(reg);
  my_flexible_qpe<lambda<power>() {
    exponentiation_with_depth_constraint<[
      PauliTerm {
        pauli = [Pauli::I],
        coefficient = 0.2383
      },
      PauliTerm {
        pauli = [Pauli::Z],
        coefficient = -0.1941
      },
      PauliTerm {
        pauli = [Pauli::X],
        coefficient = 0.0441
      }
    ], (-6.2832) * power, 2200 * (1.4142 ** log(power, 2))>(reg);
  }>(phase);
}
