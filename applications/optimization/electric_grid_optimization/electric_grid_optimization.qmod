qstruct QAOAVars {
  x: qbit[4][3];
  source_supply_rule_0_slack_var: qbit[2];
  source_supply_rule_1_slack_var: qbit[2];
  source_supply_rule_2_slack_var: qbit[2];
}

qfunc main(params: real[8], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 4) {
    phase (-(((((((((((((((((((0.5 * v.x[0][0]) + v.x[0][1]) + v.x[0][2]) + (2.1 * v.x[0][3])) + v.x[1][0]) + (0.6 * v.x[1][1])) + (1.4 * v.x[1][2])) + v.x[1][3]) + v.x[2][0]) + (1.4 * v.x[2][1])) + (0.4 * v.x[2][2])) + (2.3 * v.x[2][3])) + (20 * ((((v.x[0][0] + v.x[1][0]) + v.x[2][0]) - 1) ** 2))) + (20 * ((((v.x[0][1] + v.x[1][1]) + v.x[2][1]) - 1) ** 2))) + (20 * ((((v.x[0][2] + v.x[1][2]) + v.x[2][2]) - 1) ** 2))) + (20 * ((((v.x[0][3] + v.x[1][3]) + v.x[2][3]) - 1) ** 2))) + (20 * (((((((v.source_supply_rule_0_slack_var[0] + v.source_supply_rule_0_slack_var[1]) + v.x[0][0]) + v.x[0][1]) + v.x[0][2]) + v.x[0][3]) - 2.0) ** 2))) + (20 * (((((((v.source_supply_rule_1_slack_var[0] + v.source_supply_rule_1_slack_var[1]) + v.x[1][0]) + v.x[1][1]) + v.x[1][2]) + v.x[1][3]) - 2.0) ** 2))) + (20 * (((((((v.source_supply_rule_2_slack_var[0] + v.source_supply_rule_2_slack_var[1]) + v.x[2][0]) + v.x[2][1]) + v.x[2][2]) + v.x[2][3]) - 2.0) ** 2))), params[i]);
    apply_to_all(lambda(q) {
      RX(params[4 + i], q);
    }, v);
  }
}
