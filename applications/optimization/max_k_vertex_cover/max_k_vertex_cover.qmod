qstruct QAOAVars {
  x: qbit[10];
}

qfunc main(params: real[6], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 3) {
    phase (-(((((((((((((((((((((((1 - v.x[0]) * (1 - v.x[1])) + ((1 - v.x[0]) * (1 - v.x[5]))) + ((1 - v.x[0]) * (1 - v.x[6]))) + ((1 - v.x[0]) * (1 - v.x[7]))) + ((1 - v.x[0]) * (1 - v.x[8]))) + ((1 - v.x[1]) * (1 - v.x[2]))) + ((1 - v.x[1]) * (1 - v.x[4]))) + ((1 - v.x[1]) * (1 - v.x[5]))) + ((1 - v.x[1]) * (1 - v.x[6]))) + ((1 - v.x[1]) * (1 - v.x[9]))) + ((1 - v.x[2]) * (1 - v.x[3]))) + ((1 - v.x[2]) * (1 - v.x[4]))) + ((1 - v.x[3]) * (1 - v.x[6]))) + ((1 - v.x[3]) * (1 - v.x[8]))) + ((1 - v.x[4]) * (1 - v.x[6]))) + ((1 - v.x[4]) * (1 - v.x[7]))) + ((1 - v.x[4]) * (1 - v.x[8]))) + ((1 - v.x[4]) * (1 - v.x[9]))) + ((1 - v.x[5]) * (1 - v.x[6]))) + ((1 - v.x[7]) * (1 - v.x[8]))) + ((1 - v.x[8]) * (1 - v.x[9]))) + (20 * (((((((((((v.x[0] + v.x[1]) + v.x[2]) + v.x[3]) + v.x[4]) + v.x[5]) + v.x[6]) + v.x[7]) + v.x[8]) + v.x[9]) - 5) ** 2))), params[i]);
    apply_to_all(lambda(q) {
      RX(params[3 + i], q);
    }, v);
  }
}
