qstruct QAOAVars {
  x_0: qbit;
  x_1: qbit;
  x_2: qbit;
  x_3: qbit;
  x_4: qbit;
  x_5: qbit;
  x_6: qbit;
  x_7: qbit;
  x_8: qbit;
  x_9: qbit;
}



qfunc main(params: real[6], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 3) {
    phase (-(((((((((((((((((((((((1 - v.x_0) * (1 - v.x_1)) + ((1 - v.x_0) * (1 - v.x_5))) + ((1 - v.x_0) * (1 - v.x_6))) + ((1 - v.x_0) * (1 - v.x_7))) + ((1 - v.x_0) * (1 - v.x_8))) + ((1 - v.x_1) * (1 - v.x_2))) + ((1 - v.x_1) * (1 - v.x_4))) + ((1 - v.x_1) * (1 - v.x_5))) + ((1 - v.x_1) * (1 - v.x_6))) + ((1 - v.x_1) * (1 - v.x_9))) + ((1 - v.x_2) * (1 - v.x_3))) + ((1 - v.x_2) * (1 - v.x_4))) + ((1 - v.x_3) * (1 - v.x_6))) + ((1 - v.x_3) * (1 - v.x_8))) + ((1 - v.x_4) * (1 - v.x_6))) + ((1 - v.x_4) * (1 - v.x_7))) + ((1 - v.x_4) * (1 - v.x_8))) + ((1 - v.x_4) * (1 - v.x_9))) + ((1 - v.x_5) * (1 - v.x_6))) + ((1 - v.x_7) * (1 - v.x_8))) + ((1 - v.x_8) * (1 - v.x_9))) + (20 * (((((((((((v.x_0 + v.x_1) + v.x_2) + v.x_3) + v.x_4) + v.x_5) + v.x_6) + v.x_7) + v.x_8) + v.x_9) - 5) ** 2))), params[i]);
    apply_to_all(lambda(q) {
      RX(params[3 + i], q);
    }, v);
  }
}
