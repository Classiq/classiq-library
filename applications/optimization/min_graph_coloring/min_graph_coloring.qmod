qstruct QAOAVars {
  x: qbit[5][3];
}

qfunc main(params: real[12], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 6) {
    phase (-((((((((((((((-(1 - v.x[0][0])) * (1 - v.x[0][1])) * (1 - v.x[0][2])) * (1 - v.x[0][3])) * (1 - v.x[0][4])) - (((((1 - v.x[1][0]) * (1 - v.x[1][1])) * (1 - v.x[1][2])) * (1 - v.x[1][3])) * (1 - v.x[1][4]))) - (((((1 - v.x[2][0]) * (1 - v.x[2][1])) * (1 - v.x[2][2])) * (1 - v.x[2][3])) * (1 - v.x[2][4]))) + (20 * ((((v.x[0][0] + v.x[1][0]) + v.x[2][0]) - 1) ** 2))) + (20 * ((((v.x[0][1] + v.x[1][1]) + v.x[2][1]) - 1) ** 2))) + (20 * ((((v.x[0][2] + v.x[1][2]) + v.x[2][2]) - 1) ** 2))) + (20 * ((((v.x[0][3] + v.x[1][3]) + v.x[2][3]) - 1) ** 2))) + (20 * ((((v.x[0][4] + v.x[1][4]) + v.x[2][4]) - 1) ** 2))) + (20 * ((((((((((((((((v.x[0][0] * v.x[0][4]) + (v.x[0][0] * ((v.x[0][1] + v.x[0][3]) + v.x[0][4]))) + (v.x[0][1] * (v.x[0][0] + v.x[0][3]))) + (v.x[0][2] * v.x[0][3])) + (v.x[0][3] * ((v.x[0][0] + v.x[0][1]) + v.x[0][2]))) + (v.x[1][0] * v.x[1][4])) + (v.x[1][0] * ((v.x[1][1] + v.x[1][3]) + v.x[1][4]))) + (v.x[1][1] * (v.x[1][0] + v.x[1][3]))) + (v.x[1][2] * v.x[1][3])) + (v.x[1][3] * ((v.x[1][0] + v.x[1][1]) + v.x[1][2]))) + (v.x[2][0] * v.x[2][4])) + (v.x[2][0] * ((v.x[2][1] + v.x[2][3]) + v.x[2][4]))) + (v.x[2][1] * (v.x[2][0] + v.x[2][3]))) + (v.x[2][2] * v.x[2][3])) + (v.x[2][3] * ((v.x[2][0] + v.x[2][1]) + v.x[2][2]))) ** 2))) + 3), params[i]);
    apply_to_all(lambda(q) {
      RX(params[6 + i], q);
    }, v);
  }
}
