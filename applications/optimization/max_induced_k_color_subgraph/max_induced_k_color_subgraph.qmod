qstruct QAOAVars {
  x: qbit[6][2];
}

qfunc main(params: real[16], output v: QAOAVars) {
  allocate(v.size, v);
  hadamard_transform(v);
  repeat (i: 8) {
    phase (-(((((((((((((((2 * v.x[0][0]) * v.x[1][0]) + ((2 * v.x[0][1]) * v.x[1][1])) + ((2 * v.x[0][2]) * v.x[1][2])) + ((2 * v.x[0][3]) * v.x[1][3])) + ((2 * v.x[0][4]) * v.x[1][4])) + ((2 * v.x[0][5]) * v.x[1][5])) + ((1 - v.x[0][0]) * (1 - v.x[1][0]))) + ((1 - v.x[0][1]) * (1 - v.x[1][1]))) + ((1 - v.x[0][2]) * (1 - v.x[1][2]))) + ((1 - v.x[0][3]) * (1 - v.x[1][3]))) + ((1 - v.x[0][4]) * (1 - v.x[1][4]))) + ((1 - v.x[0][5]) * (1 - v.x[1][5]))) + (2 * (((((((((((((v.x[0][0] * ((v.x[0][1] + v.x[0][2]) + v.x[0][4])) + (v.x[0][1] * (((v.x[0][0] + v.x[0][2]) + v.x[0][3]) + v.x[0][5]))) + (v.x[0][2] * ((((v.x[0][0] + v.x[0][1]) + v.x[0][3]) + v.x[0][4]) + v.x[0][5]))) + (v.x[0][3] * ((v.x[0][1] + v.x[0][2]) + v.x[0][4]))) + (v.x[0][4] * (((v.x[0][0] + v.x[0][2]) + v.x[0][3]) + v.x[0][5]))) + (v.x[0][5] * ((v.x[0][1] + v.x[0][2]) + v.x[0][4]))) + (v.x[1][0] * ((v.x[1][1] + v.x[1][2]) + v.x[1][4]))) + (v.x[1][1] * (((v.x[1][0] + v.x[1][2]) + v.x[1][3]) + v.x[1][5]))) + (v.x[1][2] * ((((v.x[1][0] + v.x[1][1]) + v.x[1][3]) + v.x[1][4]) + v.x[1][5]))) + (v.x[1][3] * ((v.x[1][1] + v.x[1][2]) + v.x[1][4]))) + (v.x[1][4] * (((v.x[1][0] + v.x[1][2]) + v.x[1][3]) + v.x[1][5]))) + (v.x[1][5] * ((v.x[1][1] + v.x[1][2]) + v.x[1][4]))) ** 2))) - 6), params[i]);
    apply_to_all(lambda(q) {
      RX(params[8 + i], q);
    }, v);
  }
}
