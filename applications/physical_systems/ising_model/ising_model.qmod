{
  "functions": [
    {
      "name": "main",
      "param_decls": {
        "params_list": {
          "kind": "array",
          "element_type": {
            "kind": "real"
          },
          "size": 10
        }
      },
      "body": [
        {
          "function": "qaoa_penalty",
          "params": {
            "hamiltonian": {
              "expr": "optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 2.0)"
            },
            "params_list": {
              "expr": "params_list"
            },
            "num_qubits": {
              "expr": "len(get_field(optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 2.0)[0], 'pauli'))"
            },
            "is_st": {
              "expr": "True"
            }
          }
        }
      ]
    }
  ],
  "types": [
    {
      "name": "MyCombiProblem",
      "variables": {
        "z0": {
          "kind": "int"
        },
        "z1": {
          "kind": "int"
        },
        "z2": {
          "kind": "int"
        },
        "z3": {
          "kind": "int"
        },
        "z4": {
          "kind": "int"
        },
        "z5": {
          "kind": "int"
        }
      },
      "constraints": [],
      "objective_type": "Min",
      "objective_function": {
        "expr": "40.0*z0 + 40.0*z1 + 40.0*z2 + 40.0*z3 + 40.0*z4 + 40.0*z5 + (10 - 20*z0)*(2*z1 - 1) + (10 - 20*z0)*(2*z5 - 1) + (10 - 20*z1)*(2*z2 - 1) + (10 - 20*z2)*(2*z3 - 1) + (10 - 20*z3)*(2*z4 - 1) + (10 - 20*z4)*(2*z5 - 1) - 120.0"
      }
    }
  ],
  "classical_execution_code": "\nvqe_result = vqe(\n    hamiltonian=optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 2.0),\n    maximize=False,\n    initial_point=compute_qaoa_initial_point(optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 2.0),5),\n    optimizer=Optimizer.COBYLA,\n    max_iteration=100,\n    tolerance=0.0,\n    step_size=0.0,\n    skip_compute_variance=False,\n    alpha_cvar=0.7\n)\nsolution = get_optimization_solution(get_type(MyCombiProblem), vqe_result, 2.0)\nhamiltonian = optimization_problem_to_hamiltonian(get_type(MyCombiProblem), 2.0)\nsave({'solution': solution, \"vqe_result\": vqe_result, \"hamiltonian\": hamiltonian})\n"
}
