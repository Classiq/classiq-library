qstruct QsvtState {
  qsvt_aux: qbit;
  qsvt_real_aux: qbit;
  state: BlockEncodedState;
}

qstruct BlockEncodedState {
  block: Block;
  data: qbit[2];
}

qstruct Block {
  lcu_aux: qnum<3>;
  flag: qbit;
  aux: qbit;
}

qfunc hadamard_transform_expanded___0(target: qbit[1]) {
  repeat (index: 1) {
    H(target[index]);
  }
}

qfunc identify_block_expanded___0(const state: BlockEncodedState, block_zero_qbit: qbit) {
  block_qubits: qnum<5, False, 0>;
  data: qbit[2];
  state -> {block_qubits, data};
  block_zero_qbit ^= block_qubits == 0;
  {block_qubits, data} -> state;
}

qfunc block_encoding_cnot_0_lambda___0_0_expanded___0(const qvar: qbit[7], block_zero_qbit: qbit) {
  identify_block_expanded___0(qvar, block_zero_qbit);
}

qfunc projector_controlled_phase_expanded___0(phase: real, const qvar: qbit[7], aux: qbit) {
  within {
    block_encoding_cnot_0_lambda___0_0_expanded___0(qvar, aux);
  } apply {
    RZ(phase, aux);
  }
}

qfunc permute_block_expanded___0(i: int, j: int, data: qbit[2]) {
  repeat (k: 2) {
    if (((i >> k) & 1) == 1) {
      X(data[k]);
    } else {
      IDENTITY(data[k]);
    }
  }
  repeat (k: 2) {
    if ((k != log((j ^ i) & ((~(j ^ i)) + 1), 2)) and ((((j ^ i) >> k) & 1) == 1)) {
      CX(data[log((j ^ i) & ((~(j ^ i)) + 1), 2)], data[k]);
    } else {
      IDENTITY(data);
    }
  }
  if (log((j ^ i) & ((~(j ^ i)) + 1), 2) != 0) {
    SWAP(data[0], data[log((j ^ i) & ((~(j ^ i)) + 1), 2)]);
  } else {
    IDENTITY(data);
  }
}

qfunc cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16: IndexedPauli[], i_captured__apply_pauli_term__16: int, const x_captured__apply_pauli_term__16: qbit[1]) {
  IDENTITY(x_captured__apply_pauli_term__16[pauli_string_captured__apply_pauli_term__16[i_captured__apply_pauli_term__16].index]);
}

qfunc cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16: IndexedPauli[], i_captured__apply_pauli_term__16: int, permutable x_captured__apply_pauli_term__16: qbit[1]) {
  X(x_captured__apply_pauli_term__16[pauli_string_captured__apply_pauli_term__16[i_captured__apply_pauli_term__16].index]);
}

qfunc cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16: IndexedPauli[], i_captured__apply_pauli_term__16: int, permutable x_captured__apply_pauli_term__16: qbit[1]) {
  Y(x_captured__apply_pauli_term__16[pauli_string_captured__apply_pauli_term__16[i_captured__apply_pauli_term__16].index]);
}

qfunc cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16: IndexedPauli[], i_captured__apply_pauli_term__16: int, const x_captured__apply_pauli_term__16: qbit[1]) {
  Z(x_captured__apply_pauli_term__16[pauli_string_captured__apply_pauli_term__16[i_captured__apply_pauli_term__16].index]);
}

qfunc switch_expanded___0(selector: int, pauli_string_captured__apply_pauli_term__16: IndexedPauli[], i_captured__apply_pauli_term__16: int, permutable x_captured__apply_pauli_term__16: qbit[1]) {
  if (selector == 0) {
    cases_0_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16, i_captured__apply_pauli_term__16, x_captured__apply_pauli_term__16);
  } else {
    if (selector == 1) {
      cases_1_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16, i_captured__apply_pauli_term__16, x_captured__apply_pauli_term__16);
    } else {
      if (selector == 2) {
        cases_2_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16, i_captured__apply_pauli_term__16, x_captured__apply_pauli_term__16);
      } else {
        if (selector == 3) {
          cases_3_lambda___0_0_expanded___0(pauli_string_captured__apply_pauli_term__16, i_captured__apply_pauli_term__16, x_captured__apply_pauli_term__16);
        }
      }
    }
  }
}

qfunc apply_pauli_term_expanded___0(pauli_string: IndexedPauli[], x: qbit[1]) {
  repeat (i: 1) {
    switch_expanded___0(pauli_string[i].pauli, pauli_string, i, x);
  }
}

qfunc unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__13: qbit[1]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=0, index=0}
  ], data_captured__lcu_pauli__13);
}

qfunc unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__13: qbit[1]) {
  apply_pauli_term_expanded___0([
    IndexedPauli {pauli=1, index=0}
  ], data_captured__lcu_pauli__13);
}

qfunc apply_phase_table_expanded___0(target: qbit[1]) {
  PHASE(3.1416, target[0]);
}

qfunc lcu_expanded___0(block: qnum<1, False, 0>, data_captured__lcu_pauli__13: qbit[1]) {
  within {
    inplace_prepare_state([0.5, 0.5], 0, block);
  } apply {
    repeat (i: 2) {
      control (block == i) {
        if (i == 0) {
          unitaries_0_lambda___0_0_expanded___0(data_captured__lcu_pauli__13);
        } else {
          if (i == 1) {
            unitaries_1_lambda___0_0_expanded___0(data_captured__lcu_pauli__13);
          }
        }
      }
    }
    apply_phase_table_expanded___0(block);
  }
}

qfunc lcu_pauli_expanded___0(data: qbit[1], block: qnum<1, False, 0>) {
  lcu_expanded___0(block, data);
}

qfunc block_encode_2x2_expanded___0(aux: qnum<1, False, 0>, data: qbit[1]) {
  lcu_pauli_expanded___0(data, aux);
}

qfunc block_encode_2X2_first_qubit_expanded___0(flag: qbit, aux: qbit, data: qbit[2]) {
  lsb: qbit;
  msb: qnum<1, False, 0>;
  data -> {lsb, msb};
  flag ^= msb > 0;
  block_encode_2x2_expanded___0(aux, lsb);
  {lsb, msb} -> data;
}

qfunc block_encode_2X2_arbitrary_expanded___0(i: int, j: int, flag: qbit, aux: qbit, data: qbit[2]) {
  within {
    permute_block_expanded___0(i, j, data);
  } apply {
    block_encode_2X2_first_qubit_expanded___0(flag, aux, data);
  }
}

qfunc combine_blocks_coeffs_expanded___0(pair_list: int[][], amplitudes: real[], lcu_aux: qnum<3, False, 0>, flag: qbit, aux: qbit, data: qbit[2]) {
  within {
    inplace_prepare_amplitudes(amplitudes, 0, lcu_aux);
  } apply {
    repeat (index: 6) {
      control (lcu_aux == index) {
        block_encode_2X2_arbitrary_expanded___0(pair_list[index][0], pair_list[index][1], flag, aux, data);
      }
    }
  }
}

qfunc block_encoding_demo_expanded___0(pair_list: int[][], amplitudes: real[], state: BlockEncodedState) {
  combine_blocks_coeffs_expanded___0(pair_list, amplitudes, state.block.lcu_aux, state.block.flag, state.block.aux, state.data);
}

qfunc block_encoding_0_lambda___0_0_expanded___0(q_var: qbit[7]) {
  block_encoding_demo_expanded___0([
    [0, 1],
    [0, 2],
    [0, 3],
    [1, 2],
    [1, 3],
    [2, 3]
  ], [
    0.3722,
    0.3397,
    0.3397,
    0.3145,
    0.3145,
    0.2942,
    0.5884,
    0.0
  ], q_var);
}

qfunc u_0_lambda___0_0_expanded___0(qvar: qbit[7]) {
  block_encoding_0_lambda___0_0_expanded___0(qvar);
}

qfunc u_1_lambda___0_0_expanded___0(x: qbit[7]) {
  invert {
    u_0_lambda___0_0_expanded___0(x);
  }
}

qfunc qsvt_step_expanded___0(phase1: real, phase2: real, qvar: qbit[7], aux: qbit) {
  u_1_lambda___0_0_expanded___0(qvar);
  projector_controlled_phase_expanded___0(phase1, qvar, aux);
  invert {
    u_1_lambda___0_0_expanded___0(qvar);
  }
  projector_controlled_phase_expanded___0(phase2, qvar, aux);
}

qfunc qsvt_expanded___0(phase_seq: real[], qvar: qbit[7], aux: qbit) {
  H(aux);
  projector_controlled_phase_expanded___0(phase_seq[0], qvar, aux);
  repeat (index: 29) {
    qsvt_step_expanded___0(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], qvar, aux);
  }
  if (False) {
  } else {
    u_1_lambda___0_0_expanded___0(qvar);
    projector_controlled_phase_expanded___0(phase_seq[59], qvar, aux);
  }
  H(aux);
}

qfunc qsvt_inversion_expanded___0(phase_seq: real[], qvar: qbit[7], aux: qbit) {
  qsvt_expanded___0(phase_seq, qvar, aux);
}

qfunc block_encoding_cnot_1_lambda___0_0_expanded___0(const qvar: qbit[7], block_zero_qbit: qbit) {
  identify_block_expanded___0(qvar, block_zero_qbit);
}

qfunc projector_controlled_phase_expanded___1(phase: real, const qvar: qbit[7], aux: qbit) {
  within {
    block_encoding_cnot_1_lambda___0_0_expanded___0(qvar, aux);
  } apply {
    RZ(phase, aux);
  }
}

qfunc u_2_lambda___0_0_expanded___0(qvar: qbit[7]) {
  block_encoding_0_lambda___0_0_expanded___0(qvar);
}

qfunc u_3_lambda___0_0_expanded___0(x: qbit[7]) {
  invert {
    u_2_lambda___0_0_expanded___0(x);
  }
}

qfunc qsvt_step_expanded___1(phase1: real, phase2: real, qvar: qbit[7], aux: qbit) {
  u_3_lambda___0_0_expanded___0(qvar);
  projector_controlled_phase_expanded___1(phase1, qvar, aux);
  invert {
    u_3_lambda___0_0_expanded___0(qvar);
  }
  projector_controlled_phase_expanded___1(phase2, qvar, aux);
}

qfunc qsvt_expanded___1(phase_seq: real[], qvar: qbit[7], aux: qbit) {
  H(aux);
  projector_controlled_phase_expanded___1(phase_seq[0], qvar, aux);
  repeat (index: 29) {
    qsvt_step_expanded___1(phase_seq[(2 * index) + 1], phase_seq[(2 * index) + 2], qvar, aux);
  }
  if (False) {
  } else {
    u_3_lambda___0_0_expanded___0(qvar);
    projector_controlled_phase_expanded___1(phase_seq[59], qvar, aux);
  }
  H(aux);
}

qfunc qsvt_inversion_expanded___1(phase_seq: real[], qvar: qbit[7], aux: qbit) {
  qsvt_expanded___1(phase_seq, qvar, aux);
}

qfunc qsvt_solve_system_expanded___0(b_amps: real[], phases: real[], qsvt_state: QsvtState) {
  inplace_prepare_amplitudes(b_amps, 0, qsvt_state.state.data);
  hadamard_transform_expanded___0(qsvt_state.qsvt_real_aux);
  control (qsvt_state.qsvt_real_aux == 0) {
    qsvt_inversion_expanded___0(phases, qsvt_state.state, qsvt_state.qsvt_aux);
  } else {
    invert {
      qsvt_inversion_expanded___1(phases, qsvt_state.state, qsvt_state.qsvt_aux);
    }
  }
  hadamard_transform_expanded___0(qsvt_state.qsvt_real_aux);
}

qfunc main(output qsvt_state: QsvtState) {
  allocate(9, qsvt_state);
  qsvt_solve_system_expanded___0([
    0.4079,
    0.8158,
    (-0.0408),
    (-0.4079)
  ], [
    4.7123,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1415,
    3.1418,
    3.1409,
    3.1434,
    3.1374,
    3.1507,
    3.1231,
    3.177,
    3.078,
    3.2488,
    2.9719,
    3.393,
    2.7956,
    3.5781,
    2.6451,
    2.6451,
    3.5781,
    2.7956,
    3.393,
    2.9719,
    3.2488,
    3.078,
    3.177,
    3.1231,
    3.1507,
    3.1374,
    3.1434,
    3.1409,
    3.1418,
    3.1415,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    3.1416,
    (-183.7832)
  ], qsvt_state);
}
