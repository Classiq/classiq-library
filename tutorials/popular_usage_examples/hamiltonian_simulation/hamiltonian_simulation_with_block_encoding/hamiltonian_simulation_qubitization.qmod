qfunc apply_pauli_term(pauli_string: PauliTerm, x: qbit[]) {
  repeat (index: x.len) {
    switch(pauli_string.pauli[index], [lambda() {
      IDENTITY(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      X(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      Y(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      Z(x[(pauli_string.pauli.len - index) - 1]);
    }]);
  }
}

qfunc lcu_paulis(pauli_terms_list: PauliTerm[], probs: real[], block: qnum, data: qbit[]) {
  within {
    inplace_prepare_state(probs, 0.0, block);
  } apply {
    repeat (i: pauli_terms_list.len) {
      control (block == i) {
        apply_pauli_term(pauli_terms_list[i], data);
      }
    }
  }
}

qfunc my_walk_operator(block: qbit[], data: qbit[]) {
  lcu_paulis([
    PauliTerm {
      pauli=[Pauli::I, Pauli::I],
      coefficient=0.4
    },
    PauliTerm {
      pauli=[Pauli::I, Pauli::Z],
      coefficient=0.1
    },
    PauliTerm {
      pauli=[Pauli::X, Pauli::X],
      coefficient=0.05
    },
    PauliTerm {
      pauli=[Pauli::Z, Pauli::Z],
      coefficient=0.2
    }
  ], [
    0.533333333333,
    0.133333333333,
    0.066666666667,
    0.266666666667
  ], block, data);
  reflect_about_zero(block);
  RY(2 * pi, block[0]);
}

qfunc lcu_cheb(coef: real[], generalized_signs: int[], walk_operator: qfunc (qnum, qbit[]), walk_block: qnum, walk_data: qbit[], cheb_block: qnum) {
  within {
    inplace_prepare_state(coef, 0.0, cheb_block);
  } apply {
    repeat (k: generalized_signs.len) {
      control (cheb_block == k) {
        U(0, 0, 0, (pi / 2) * generalized_signs[k], walk_data[0]);
        power (k) {
          walk_operator(walk_block, walk_data);
        }
      }
    }
  }
}

qfunc main(output ham_block: qnum, output data: qnum, output exp_block: qnum) {
  allocate(4, exp_block);
  allocate(2, ham_block);
  prepare_amplitudes([
    0.219017168306,
    0.794720495321,
    0.276765386913,
    0.493813461653
  ], 0.0, data);
  lcu_cheb([
    0.066463021055,
    0.067500417785,
    0.1149259307,
    0.128794247492,
    0.011890532707,
    0.141477482379,
    0.176746110466,
    0.141316294366,
    0.087044305684,
    0.044378224427,
    0.01946343294,
    0,
    0,
    0,
    0,
    0
  ], [
    0.0,
    1.0,
    0.0,
    1.0,
    0.0,
    1.0,
    2.0,
    3.0,
    0.0,
    1.0,
    2.0
  ], lambda(x, y) {
    my_walk_operator(x, y);
  }, ham_block, data, exp_block);
}
