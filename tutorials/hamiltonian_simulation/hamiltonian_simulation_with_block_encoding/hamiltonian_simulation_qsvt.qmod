qfunc identify_block(num_data_qubits: int, qvar: qbit[], qubit: qbit) {
  block_qubits: qnum<qvar.len - num_data_qubits, False, 0>;
  data: qbit[num_data_qubits];
  qvar -> {block_qubits, data};
  qubit ^= block_qubits == 0;
  {block_qubits, data} -> qvar;
}

qfunc apply_pauli_term(pauli_string: PauliTerm, x: qbit[]) {
  repeat (index: x.len) {
    switch(pauli_string.pauli[index], [lambda() {
      IDENTITY(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      X(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      Y(x[(pauli_string.pauli.len - index) - 1]);
    }, lambda() {
      Z(x[(pauli_string.pauli.len - index) - 1]);
    }]);
  }
}

qfunc lcu_paulis(pauli_terms_list: PauliTerm[], probs: real[], block: qnum, data: qbit[]) {
  within {
    inplace_prepare_state(probs, 0.0, block);
  } apply {
    repeat (i: pauli_terms_list.len) {
      control (block == i) {
        apply_pauli_term(pauli_terms_list[i], data);
      }
    }
  }
}

qfunc my_qsvt(phases: real[], qsvt_aux: qbit, block_ham: qbit[], data: qbit[]) {
  combined_vars: qbit[];
  {block_ham, data} -> combined_vars;
  qsvt(phases, lambda(qvar, qubit) {
    identify_block(data.len, qvar, qubit);
  }, lambda(qvar, qubit) {
    identify_block(data.len, qvar, qubit);
  }, lambda(x) {
    lcu_paulis([
      PauliTerm {
        pauli=[Pauli::I, Pauli::I],
        coefficient=0.4
      },
      PauliTerm {
        pauli=[Pauli::I, Pauli::Z],
        coefficient=0.1
      },
      PauliTerm {
        pauli=[Pauli::X, Pauli::X],
        coefficient=0.05
      },
      PauliTerm {
        pauli=[Pauli::Z, Pauli::Z],
        coefficient=0.2
      }
    ], [
      0.533333333333,
      0.133333333333,
      0.066666666667,
      0.266666666667
    ], x[0:block_ham.len], x[block_ham.len:x.len]);
  }, combined_vars, qsvt_aux);
  combined_vars -> {block_ham, data};
}

qfunc main(output qsvt_aux: qbit, output block_ham: qnum, output data: qnum, output block_exp: qbit) {
  allocate(1, qsvt_aux);
  allocate(1, block_exp);
  allocate(2, block_ham);
  prepare_amplitudes([
    0.210013606062,
    0.401192530688,
    0.156326932589,
    0.877781709047
  ], 0.0, data);
  within {
    H(block_exp);
  } apply {
    control (block_exp == 0) {
      my_qsvt([
        1.719637344108,
        2.52588728871,
        3.800733709887,
        2.313318036864,
        2.224618278572,
        3.363594945309,
        6.152896032692,
        3.363594945397,
        2.224618278529,
        2.313318036823,
        3.800733709886,
        2.525887288722,
        (-39.121067152566)
      ], qsvt_aux, block_ham, data);
    }
    control (block_exp == 1) {
      U(0, 0, 0, pi / 2, qsvt_aux);
      my_qsvt([
        4.50835942415,
        3.972681130945,
        0.795730516482,
        2.779709110191,
        4.252739646774,
        3.928512270665,
        0.670917055422,
        6.9541023626,
        (-2.354673036517),
        4.252739646776,
        2.779709110195,
        7.078915823661,
        (-2.310504176238),
        (-39.473937726108)
      ], qsvt_aux, block_ham, data);
    }
  }
}
