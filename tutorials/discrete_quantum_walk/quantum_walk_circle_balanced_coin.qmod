qfunc quantum_step_clockwise(x: qbit[]) {
  within {
    qft(x);
  } apply {
    repeat (i: x.len) {
      PHASE<((2 * pi) * (2 ** i)) / (2 ** x.len)>(x[i]);
    }
  }
}

qfunc discrete_quantum_walk<time: int, coin_flip_qfunc: qfunc (arg0: qnum), walks_qfuncs: qfunc[] ()>(coin_state: qnum) {
  power (time) {
    coin_flip_qfunc(coin_state);
    repeat (i: walks_qfuncs.len) {
      control (coin_state == i) {
        walks_qfuncs[i]();
      }
    }
  }
}

qfunc main<t: int>(output x: qnum) {
  coin: qbit;
  allocate_num<floor(log(128, 2)), True, 0>(x);
  allocate<1>(coin);
  H(coin);
  S(coin);
  discrete_quantum_walk<t, lambda(arg0) {
    H(arg0);
  }, [lambda() {
    quantum_step_clockwise(x);
  }, lambda() {
    invert {
      quantum_step_clockwise(x);
    }
  }]>(coin);
}

cscope ```
save({'run1': sample({'t': 50})})
```
