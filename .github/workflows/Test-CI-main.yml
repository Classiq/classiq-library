name: "Test Library CI (main)"

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
      #
      # Setup Repository
      #
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout the target branch
        id: checkout
        run: |
          set -ex
          echo "==== Git status before checkout ===="
          git status

          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            echo "Handling pull_request_target event"
            echo "SHOULD_TEST_ALL_FILES=false" >> $GITHUB_ENV

            if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
              echo "PR from a fork detected. Checking out the fork's branch."
              git remote add fork https://github.com/${{ github.event.pull_request.head.repo.full_name }}.git
              git fetch fork ${{ github.event.pull_request.head.ref }}
              git checkout -B ci-testing-branch FETCH_HEAD
            else
              echo "PR from the same repository detected. Checking out the branch."
              git fetch origin ${{ github.event.pull_request.head.ref }}
              git checkout ${{ github.event.pull_request.head.ref }}
            fi

          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Handling workflow_dispatch event: No checkout needed"
            echo "SHOULD_TEST_ALL_FILES=true" >> $GITHUB_ENV
            echo "list_of_ipynb_changed=**/*.ipynb" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Handling push event: No checkout needed"

          else
            echo "Unsupported event type: ${github.event_name}. Exiting."
            exit 1
          fi

          echo "==== Git status after checkout ===="
          git status

      #
      # Setup Python
      #
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Get latest classiq version for cache key
        id: classiq-version
        run: |
          echo "LATEST_CLASSIQ_VERSION=$(pip index versions classiq 2>/dev/null | grep classiq | cut -d '(' -f2 | cut -d ')' -f1)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}-classiq-${{steps.classiq-version.outputs.LATEST_CLASSIQ_VERSION}}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: us-east-1
          mask-aws-account-id: true

      - name: Install dependencies
        run: |
          set -e
          python -m pip install -U pip
          python -m pip install -U -r requirements.txt
          python -m pip install -U -r requirements_tests.txt
          python -m pip install qiskit  # ðŸ‘ˆ Added line to install Qiskit
          python -m pip install imbalanced-learn

      - name: Install couenne solver
        env:
          COUENNE_SOURCE: "s3://public-library-resources/couenne.gz"
          COUENNE_FILE: ${{ runner.temp }}/couenne.gz
          LOCAL_BIN: ${{ runner.temp }}/.local/bin
        run: |
          set -eux
          aws s3 cp "$COUENNE_SOURCE" "$COUENNE_FILE"
          mkdir -p "$LOCAL_BIN"
          echo "$LOCAL_BIN" >>"$GITHUB_PATH"
          gzip -dc "$COUENNE_FILE" >"${LOCAL_BIN}/couenne"
          chmod ugo+x "${LOCAL_BIN}/couenne"

      - name: Set authentication
        run: .github/scripts/get_m2m_token.sh
        env:
          IS_DEV: "false"
          M2M_SECRET_ARN: "${{ secrets.PROD_M2M_SECRET_ARN }}"

      - name: Get changed notebook files
        id: changed-files-ipynb
        uses: tj-actions/changed-files@v46.0.1
        with:
          files: |
            **/*.ipynb

      - name: Run Notebooks
        run: python -m pytest --log-cli-level=INFO --durations=0 tests
        env:
          JUPYTER_PLATFORM_DIRS: "1"
          SHOULD_TEST_ALL_FILES: "${{ env.SHOULD_TEST_ALL_FILES }}"
          LIST_OF_IPYNB_CHANGED: "${{ steps.changed-files-ipynb.outputs.all_changed_files }}"
          CLASSIQ_IDE: "https://platform.classiq.io"
          CLASSIQ_HOST: "https://api.classiq.io"
